
========================================================================================================================
Basics of Redis
========================================================================================================================

Redis is a key-value store different in a way from other kev-value databses in its ability to support different types of Database.

=========
Data types
=========

// String :

Redis string is a sequence of bytes. Strings in Redis are binary safe, meaning they have a known length not determined by any special terminating characters, 
so you can store anything up to 512 megabytes in one string.

Example
redis 127.0.0.1:6379> SET name "tutorialspoint"
OK
redis 127.0.0.1:6379> GET name
"tutorialspoint"
In the above example SET and GET are redis commands, name is the key used in redis and tutorialspoint is the string value that is stored in redis.

// Hashes :
A Redis hash is a collection of key value pairs. Redis Hashes are maps between string fields and string values, so they are used to represent objects

Example
redis 127.0.0.1:6379> HMSET user:1 username tutorialspoint password tutorialspoint points 200
OK
redis 127.0.0.1:6379> HGETALL user:1

1) "username"
2) "tutorialspoint"
3) "password"
4) "tutorialspoint"
5) "points"
6) "200"

In the above example hash data type is used to store user's object whichh contais basic information of user. Here HMSET, HEGTALL are commands for redis while user:1 is the key.
Every hash can store up to 232 - 1 field-value pairs 

// Lists :

Redis Lists are simply lists of strings, sorted by insertion order. You can add elements to a Redis List on the head or on the tail.

Example
redis 127.0.0.1:6379> lpush tutoriallist redis
(integer) 1
redis 127.0.0.1:6379> lpush tutoriallist mongodb
(integer) 2
redis 127.0.0.1:6379> lpush tutoriallist rabitmq
(integer) 3
redis 127.0.0.1:6379> lrange tutoriallist 0 10

1) "rabitmq"
2) "mongodb"
3) "redis"

The max length of a list is 232 - 1 i.e ((2 raised to 32) -1) elements 


// Sets :
Redis Sets are an unordered collection of Strings. In redis you can add, remove, and test for existence of members in O(1) time complexity.

Example
redis 127.0.0.1:6379> sadd tutoriallist redis
(integer) 1
redis 127.0.0.1:6379> sadd tutoriallist mongodb
(integer) 1
redis 127.0.0.1:6379> sadd tutoriallist rabitmq
(integer) 1
redis 127.0.0.1:6379> sadd tutoriallist rabitmq
(integer) 0
redis 127.0.0.1:6379> smembers tutoriallist

1) "rabitmq"
2) "mongodb"
3) "redis"

NOTE: In the above example rabitmq is added twice but due to unique property of set it is added only once.

The max number of members in a set is 232 - 1((2 raised to 32)-1)

// sorted sets :

Redis Sorted Sets are, similarly to Redis Sets, non repeating collections of Strings. The difference is that every member of a Sorted Set is associated with score, that is used in order to take the sorted set ordered, from the smallest to the greatest score. While members are unique, scores may be repeated.

Example
redis 127.0.0.1:6379> zadd tutoriallist 0 redis
(integer) 1
redis 127.0.0.1:6379> zadd tutoriallist 0 mongodb
(integer) 1
redis 127.0.0.1:6379> zadd tutoriallist 0 rabitmq
(integer) 1
redis 127.0.0.1:6379> zadd tutoriallist 0 rabitmq
(integer) 0
redis 127.0.0.1:6379> ZRANGEBYSCORE tutoriallist 0 1000

1) "redis"
2) "mongodb"
3) "rabitmq"


========================================================================================================================
Redis Commands
========================================================================================================================

Redis commands are used to perform some operations on redis server.

Basic syntax of redis client is as follows:
$redis-cli

Example
Following example explains how we can start redis client.

To start redis client, open terminal and type the command redis-cli. This will connect to your local server and now you can run any command.
$redis-cli
redis 127.0.0.1:6379>
redis 127.0.0.1:6379> PING

PONG
In the above example we connect to redis server running on local machine and executes a command PING, that checks whether server is running or not.


To run commands on redis remote server you need to connect to server by same client redis-cli :

Syntax
$ redis-cli -h host -p port -a password
Example
Following example shows how to connect to redis remote server running on host 127.0.0.1, port 6379 and has password mypass.

$redis-cli -h 127.0.0.1 -p 6379 -a "mypass"
redis 127.0.0.1:6379>
redis 127.0.0.1:6379> PING

PONG


========================
Redis Keys
========================

Redis keys commands are used for managing keys in redis. Syntax for using redis keys commands is shown below:
Syntax
redis 127.0.0.1:6379> COMMAND KEY_NAME
Example
redis 127.0.0.1:6379> SET tutorialspoint redis
OK
redis 127.0.0.1:6379> DEL tutorialspoint
(integer) 1
In the above example DEL is the command, while tutorialspoint is the key. If the key is deleted, then output of the command will be (integer) 1, otherwise it will be (integer) 0


// del key

Redis DEL command is used to delete existing key in redis.

Return Value
Number of keys that were removed.

Syntax
Basic syntax of redis DEL command is shown below:

redis 127.0.0.1:6379> DEL KEY_NAME

Eg:
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorialspoint redis
OK
Now delete the previous created key

redis 127.0.0.1:6379> DEL tutorialspoint
(integer) 1

// dump key

Redis DUMP command is used to get serialize version of data stored at specified key in redis.

Return Value
Serialized value (String)

Syntax
Basic syntax of redis DUMP command is shown below:

redis 127.0.0.1:6379> DUMP KEY_NAME

Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorialspoint redis
OK
Now create dump of the previously created key

redis 127.0.0.1:6379> DUMP tutorialspoint
"\x00\x05redis\x06\x00S\xbd\xc1q\x17z\x81\xb2"


//exists key

Redis EXISTS command is used to check whether key exists in redis or not.

Return Value
Integer value

1, if key exists.

0, if key does not exists.

Syntax
Basic syntax of redis EXISTS command is shown below:

redis 127.0.0.1:6379> EXISTS KEY_NAME
Example
redis 127.0.0.1:6379> EXISTS tutorialspoint-new-key
(integer) 0
Now create a key with name tutorialspoint-new-key and check for existence of it.

redis 127.0.0.1:6379> EXISTS tutorialspoint-new-key
(integer) 1


//expire key

Redis Expire command is used to set expiry of key. After the expiry time key will not be available in redis.

Return Value
Integer value 1 or 0

1, if timeout is set for key.

0, if key does not exists or timeout could not set.

Syntax
Basic syntax of redis Expire command is shown below:

redis 127.0.0.1:6379> Expire KEY_NAME TIME_IN_SECONDS
Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorialspoint redis
OK
Now set timeout of previously created key

redis 127.0.0.1:6379> EXPIRE tutorialspoint 60
(integer) 1


//expireat key

Redis Expireat command is used to set expiry of key in Unix timestamp format. After the expiry time key will not be available in redis.

Return Value
Integer value 1 or 0

1, if timeout is set for key.

0, if key does not exists or timeout could not set.

Syntax
Basic syntax of redis Expireat command is shown below:

redis 127.0.0.1:6379> Expireat KEY_NAME TIME_IN_UNIX_TIMESTAMP
Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorialspoint redis
OK
Now set timeout of previously created key

redis 127.0.0.1:6379> EXPIREAT tutorialspoint 1293840000
(integer) 1
EXISTS tutorialspoint
(integer) 0


// pexpire key :

Redis Pexpire command is used to set expiry of key in milliseconds. After the expiry time key will not be available in redis.

Return Value
Integer value 1 or 0

1, if timeout is set for key.

0, if key does not exists or timeout could not set.

Syntax
Basic syntax of redis Expire command is shown below:

redis 127.0.0.1:6379> PEXPIRE KEY_NAME TIME_IN_MILLISECONDS
Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorialspoint redis
OK
Now set timeout of previously created key

redis 127.0.0.1:6379> PEXPIRE tutorialspoint 5000
(integer) 1
In the above example 5 seconds time is set for the key tutorialspoint. After 5 seconds key will expire automatically.

//pexpireat key

Redis Pexpireat command is used to set expiry of key in unix timestamp specified in milliseconds. After the expiry time key will not be available in redis.

Return Value
Integer value 1 or 0

1, if timeout is set for key.

0, if key does not exists or timeout could not set.

Syntax
Basic syntax of redis Pexpireat command is shown below:

redis 127.0.0.1:6379> PEXPIREAT KEY_NAME TIME_IN_MILLISECONDS_IN_UNIX_TIMESTAMP
Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorialspoint redis
OK
Now set timeout of previously created key

redis 127.0.0.1:6379> PEXPIREAT tutorialspoint 1555555555005
(integer) 1

//keys key

Redis KEYS command is used to search keys with matching pattern.

Return Value
List of keys matching pattern (Array).

Syntax
Basic syntax of redis KEYS command is shown below:

redis 127.0.0.1:6379> KEYS PATTERN
Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorial1 redis
OK
redis 127.0.0.1:6379> SET tutorial2 mysql
OK
redis 127.0.0.1:6379> SET tutorial3 mongodb
OK
Now search redis with keys starting from keyword tutorial

redis 127.0.0.1:6379> KEYS tutorial*
1) "tutorial3"
2) "tutorial1"
3) "tutorial2"
To get list of all keys available in redis just use only *

redis 127.0.0.1:6379> KEYS *
1) "tutorial3"
2) "tutorial1"
3) "tutorial2"

// move key

Redis MOVE command is used to move a key from currently selected database to specified destination database.

Return Value
Integer value 1 or 0

1, if key is moved.

0, if key is not moved.

Syntax
Basic syntax of redis MOVE command is shown below:

redis 127.0.0.1:6379> MOVE KEY_NAME DESTINATION_DATABASE
Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorial1 redis
OK
In redis by default 0th database is selected, so now we are moving the generated key in second database.

redis 127.0.0.1:6379> MOVE tutorial1 1
1) (integer) 1

//persist key

Redis PERSIST command is used to remove the expiration from key.

Return Value
Integer value 1 or 0

1, if timeout is removed from key.

0, if key does not exist or does not have an associated timeout.

Syntax
Basic syntax of redis PERSIST command is shown below:

redis 127.0.0.1:6379> PERSIST KEY_NAME
Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorial1 redis
OK
Now set the expiry of key, and after that just remove that expiry.

redis 127.0.0.1:6379> EXPIRE tutorial1 60
1) (integer) 1
redis 127.0.0.1:6379> TTL tutorial1
1) (integer) 60
redis 127.0.0.1:6379> PERSIST tutorial1
1) (integer) 1
redis 127.0.0.1:6379> TTL tutorial1
1) (integer) -1

//pttl key

Redis PTTL command is used to get remaining time of key expiry in milliseconds.

Return Value
Integer value TTL in milliseconds, or a negative value

TTL in milliseconds.

-1, if key does not have expiry timeout.

-2, if key does not exist.

Syntax
Basic syntax of redis PTTL command is shown below:

redis 127.0.0.1:6379> PTTL KEY_NAME
Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorialname redis
OK
Now set the expiry of key, and after that just check the remaining expiry time.

redis 127.0.0.1:6379> EXPIRE tutorialname 1
1) (integer) 1
redis 127.0.0.1:6379> PTTL tutorialname
1) (integer) 999


// ttl key 

Redis TTL command is used to get remaining time of key expiry in seconds.

Return Value
Integer value TTL in milliseconds, or a negative value

TTL in milliseconds.

-1, if key does not have expiry timeout.

-2, if key does not exist.

Syntax
Basic syntax of redis TTL command is shown below:

redis 127.0.0.1:6379> TTL KEY_NAME
Example
First, create a key in redis and set some value in it.

redis 127.0.0.1:6379> SET tutorialname redis
OK
Now set the expiry of key, and after that just check the remaining expiry time.

redis 127.0.0.1:6379> EXPIRE tutorialname 60
1) (integer) 1
redis 127.0.0.1:6379> TTL tutorialname
1) (integer) 59


//random key 

Redis RANDOMKEY command is used to get a random key from redis database.

Return Value
String, a random key or nil, if database is empty.

Syntax
Basic syntax of redis RANDOMKEY command is shown below:

redis 127.0.0.1:6379> RANDOMKEY
Example
First, create some keys in redis and set some values in it.

redis 127.0.0.1:6379> SET tutorial1 redis
OK
redis 127.0.0.1:6379> SET tutorial2 mysql
OK
redis 127.0.0.1:6379> SET tutorial3 mongodb
OK
Now get a random key from redis.

redis 127.0.0.1:6379> RANDOMKEY
1) tutorial3

//rename key

Redis RENAME command is used to change the name of a key.

Return Value
String reply OK or error.

It returns an error if old key and new key names are equal or when key does not exist. If new key already exist, then it overwrite the existing key.

Syntax
Basic syntax of redis RENAME command is shown below:

redis 127.0.0.1:6379> RENAME OLD_KEY_NAME NEW_KEY_NAME
Example
First, create some keys in redis and set some values in it.

redis 127.0.0.1:6379> SET tutorial1 redis
OK
Now rename the key tutorial1 to new-tutorial.

redis 127.0.0.1:6379> RENAME tutorial1 new-tutorial
OK

//renamenx key

Redis RENAMENX command is used to change the name of a key, if the new key does not exist.

Return Value
Integer reply 1 or 0.

1, if key is renamed to new key.

0, if new key already exist.

Syntax
Basic syntax of redis RENAMENX command is shown below:

redis 127.0.0.1:6379> RENAMENX OLD_KEY_NAME NEW_KEY_NAME
Example
First, create some keys in redis and set some values in it.

redis 127.0.0.1:6379> SET tutorial1 redis
OK
redis 127.0.0.1:6379> SET tutorial2 mongodb
OK
Now rename the key tutorial1 to new-tutorial.

redis 127.0.0.1:6379> RENAMENX tutorial1 new-tutorial
(integer) 1
redis 127.0.0.1:6379> RENAMENX tutorial2 new-tutorial
(integer) 0


//type key 

Redis TYPE command is used to get the data type of value stored in key.

Return Value
String reply, data type of value stored in key or none

Syntax
Basic syntax of redis TYPE command is shown below:

redis 127.0.0.1:6379> TYPE KEY_NAME 
Example
First, create some keys in redis and set some values in it.

redis 127.0.0.1:6379> SET tutorial1 redis
OK
Now check the type of key.

redis 127.0.0.1:6379> TYPE tutorial1
string


===================
Redis Strings
=================== 


//set 

Redis SET command is used to set some string value in redis key.

Return Value
Simple string reply. OK, if value is set in key or Null, if value does not set.

Syntax
Basic syntax of redis SET command is shown below:

redis 127.0.0.1:6379> SET KEY_NAME VALUE
Example
redis 127.0.0.1:6379> SET tutorialspoint redis
OK
Options
In SET command there are many options available, that modify the behaviour of command. Basic syntax of SET command with available options is shown below:

redis 127.0.0.1:6379> SET KEY VALUE [EX seconds] [PX milliseconds] [NX|XX]
EX seconds - Set the specified expire time, in seconds.

PX milliseconds - Set the specified expire time, in milliseconds.

NX - Only set the key if it does not already exist.

XX - Only set the key if it already exist.

Example
redis 127.0.0.1:6379> SET tutorialspoint redis EX 60 NX 
OK
Above example will set the key tutorialspoint, with expiry of 60 seconds, if the key does not exist.

// get 

Redis GET command is used to get the value stored in specified key. If key does not exist, then nil is returned. If returned value is not string, then error is returned.

Return Value
Simple string reply. Value or key or nil.

Syntax
Basic syntax of redis GET command is shown below:

redis 127.0.0.1:6379> GET KEY_NAME
Example
First, set a key in redis and then get it.

redis 127.0.0.1:6379> SET tutorialspoint redis
OK
redis 127.0.0.1:6379> GET tutorialspoint
"redis"


//getrange

Redis GETRANGE command is used to get the substring of the string value stored at key, determined by the offsets start and end (both are inclusive). Negative offsets can be used in order to provide an offset starting from the end of the string.

The function handles out of range requests by limiting the resulting range to the actual length of the string.

Return Value
Simple string reply.

Syntax
Basic syntax of redis GETRANGE command is shown below:

redis 127.0.0.1:6379> GETRANGE KEY_NAME start end
Example
First, set a key in redis and then get some part of it.

redis 127.0.0.1:6379> SET mykey "This is my test key"
OK
redis 127.0.0.1:6379> GETRANGE mykey 0 3
"This"
redis 127.0.0.1:6379> GETRANGE mykey 0 -1
"This is my test key"

//getset

Redis GETSET command set specified string value in redis key and returns its old value.

Return Value
Simple string reply, old value of key. If key does not exist, then nil is returned.

Syntax
Basic syntax of redis GETSET command is shown below:

redis 127.0.0.1:6379> GETSET KEY_NAME VALUE
Example
redis 127.0.0.1:6379> GETSET mynewkey "This is my test key"
(nil)
redis 127.0.0.1:6379> GETSET mynewkey "This is my new value to test getset"
"This is my test key"

//getbit

Redis GETBIT command is used to get the bit value at offset in the string value stored at key.

Return Value
Integer, the bit value stored at offset.

Syntax
Basic syntax of redis GETBIT command is shown below:

redis 127.0.0.1:6379> GETBIT KEY_NAME OFFSET
Example
redis 127.0.0.1:6379> SETBIT mykey 7 1
(integer) 0
redis 127.0.0.1:6379> GETBIT mykey 0
(integer) 0
redis 127.0.0.1:6379> GETBIT mykey 7
(integer) 1
redis 127.0.0.1:6379> GETBIT mykey 100
(integer) 0

//mget

Redis MGET command is used to get the values of all specified keys. For every key that does not hold a string value or does not exist, the special value nil is returned.

Return Value
Array, list of values at the specified keys.

Syntax
Basic syntax of redis MGET command is shown below:

redis 127.0.0.1:6379> MGET KEY1 KEY2 .. KEYN
Example
redis 127.0.0.1:6379> SET key1 "hello"
OK
redis 127.0.0.1:6379> SET key2 "world"
OK
redis 127.0.0.1:6379> MGET key1 key2 someOtherKey
1) "Hello"
2) "World"
3) (nil)

//setbit

sets the key value
redis 127.0.0.1:6379> SETEX KEY_NAME VALUE

Eg:
redis 127.0.0.1:6379> SETEX mykey redis
OK


//setex

Redis SETEX command is used to set some string value with specified timeout in redis key.

Return Value
Simple string reply. OK, if value is set in key or Null, if value does not set.

Syntax
Basic syntax of redis SETEX command is shown below:

redis 127.0.0.1:6379> SETEX KEY_NAME TIMEOUT VALUE
Example
redis 127.0.0.1:6379> SETEX mykey 60 redis
OK
redis 127.0.0.1:6379> TTL mykey
60
redis 127.0.0.1:6379> GET mykey
"redis


//setnx

Redis SETNX command is used to set some string value in redis key, if key does not exist in redis. Fullform of SETNX is SET if Not eXists.

Return Value
Integer reply 1 or 0

1, if the key is set.

0, if the key is not set.

Syntax
Basic syntax of redis SETNX command is shown below:

redis 127.0.0.1:6379> SETNX KEY_NAME VALUE
Example
redis 127.0.0.1:6379> SETNX mykey redis
(integer) 1
redis 127.0.0.1:6379> SETNX mykey mongodb
(integer) 0
redis 127.0.0.1:6379> GET mykey
"redis"

//setrange

Redis SETRANGE command is used to Overwrite part of a string at key starting at the specified offset.

Return Value
Integer reply, the length of the string after it was modified by the command.

Syntax
Basic syntax of redis SETRANGE command is shown below:

redis 127.0.0.1:6379> SETRANGE KEY_NAME OFFSET VALUE
Example
redis 127.0.0.1:6379> SET key1 "Hello World"
OK
redis 127.0.0.1:6379> SETRANGE key1 6 "Redis"
(integer) 11
redis 127.0.0.1:6379> GET key1
"Hello Redis"

//strlen

Redis STRLEN command is used to get the length of the string value stored at key. An error is returned when key holds a non-string value.

Return Value
Integer reply, the length of the string at key, or 0 when key does not exist.

Syntax
Basic syntax of redis SETRANGE command is shown below:

redis 127.0.0.1:6379> STRLEN KEY_NAME
Example
redis 127.0.0.1:6379> SET key1 "Hello World"
OK
redis 127.0.0.1:6379> STRLEN key1
(integer) 11
redis 127.0.0.1:6379> STRLEN key2
(integer) 0

//mset

Redis MSET command is used to set multiple values to multiple keys.

Return Value
Simple string reply OK

Syntax
Basic syntax of redis MSET command is shown below:

redis 127.0.0.1:6379> MSET key1 value1 key2 value2 .. keyN valueN 
Example
redis 127.0.0.1:6379> MSET key1 "Hello" key2 "World"
OK
redis 127.0.0.1:6379> GET key1
"Hello"
redis 127.0.0.1:6379> GET key2
1) "World"

//msetnx

Redis MSETNX command is used to set multiple values to multiple keys, only if none of the already exists. If any one from current operation exists in redis then MSETNX does not perform any operation.

Return Value
Integer reply 1 or 0

1, if all keys are set in redis

0, if no keys are set in redis

Syntax
Basic syntax of redis MSETNX command is shown below:

redis 127.0.0.1:6379> MSETNX key1 value1 key2 value2 .. keyN valueN 
Example
redis 127.0.0.1:6379> MSETNX key1 "Hello" key2 "world"
(integer) 1
redis 127.0.0.1:6379> MSETNX key2 "worlds" key3 "third key"
(integer) 0
redis 127.0.0.1:6379> MGET key1 key2 key3
1) "Hello"
2) "world"
3) (nil)

//psetex

Redis PSETEX command is used to set the value of key, with expiration of time in milliseconds.

Return Value
Simple string reply OK

Syntax
Basic syntax of redis PSETEX command is shown below:

redis 127.0.0.1:6379> PSETEX key1 EXPIRY_IN_MILLISECONDS value1 
Example
redis 127.0.0.1:6379> PSETEX mykey 1000 "Hello"
OK
redis 127.0.0.1:6379> PTTL mykey
999
redis 127.0.0.1:6379> GET mykey
1) "Hello"


//incr

Redis INCR command is used to increment the integer value of a key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64 bit signed integers.

Return Value
Integer reply, the value of key after the increment

Syntax
Basic syntax of redis INCR command is shown below:

redis 127.0.0.1:6379> INCR KEY_NAME 
Example
redis 127.0.0.1:6379> SET visitors 1000
OK
redis 127.0.0.1:6379> INCR visitors
(integer) 1001
redis 127.0.0.1:6379> GET visitors
(integer) 1001

//incrby

Redis INCRBY command is used to increment the number stored at key by specified value. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer.

Return Value
Integer reply, the value of key after the increment

Syntax
Basic syntax of redis INCRBY command is shown below:

redis 127.0.0.1:6379> INCRBY KEY_NAME INCR_AMOUNT
Example
redis 127.0.0.1:6379> SET visitors 1000
OK
redis 127.0.0.1:6379> INCRBY visitors 5
(integer) 1005
redis 127.0.0.1:6379> GET visitors
(integer) 1005

//incrbyfloat

Redis INCRBYFLOAT command is used to increments the string representing a floating point number stored at key by the specified increment. If the key does not exist, it is set to 0 before performing the operation. If the key contains a value of the wrong type or current key content or the specified increment are not parsable as floating point number, then en error is returned.

Return Value
String reply, the value of key after the increment.

Syntax
Basic syntax of redis INCRBYFLOAT command is shown below:

redis 127.0.0.1:6379> INCRBYFLOAT KEY_NAME INCR_AMOUNT
Example
redis 127.0.0.1:6379> SET visitors 1000.20
OK
redis 127.0.0.1:6379> INCRBYFLOAT visitors .50
1000.70
redis 127.0.0.1:6379> GET visitors
1000.70


//decr

Redis DECR command is used to decrement the integer value of a key by one. If the key does not exist, it is set to 0 before performing the operation. An error is returned if the key contains a value of the wrong type or contains a string that can not be represented as integer. This operation is limited to 64 bit signed integers.

Return Value
Integer reply, the value of key after the increment

Syntax
Basic syntax of redis DECR command is shown below:

redis 127.0.0.1:6379> DECR KEY_NAME 
Example
redis 127.0.0.1:6379> SET visitors 1000
OK
redis 127.0.0.1:6379> DECR visitors
(integer) 999
redis 127.0.0.1:6379> SET visitors "13131312312312312312312rgergerg"
Ok
redis 127.0.0.1:6379> DECR visitors
ERR value is not an integer or out of range

// silmilarly decrby

//append

Redis APPEND command is used to add some value in a key.

Return Value
Integer reply, the length of the string after the append operation.

Syntax
Basic syntax of redis APPEND command is shown below:

redis 127.0.0.1:6379> APPEND KEY_NAME NEW_VALUE
Example
redis 127.0.0.1:6379> SET mykey "hello"
OK
redis 127.0.0.1:6379> APPEND mykey " tutorialspoint"
(integer) 20
redis 127.0.0.1:6379> GET mykey 
"hello tutorialspoint"

=========================================
Redis Hashes
=========================================

Eg:
redis 127.0.0.1:6379> HMSET tutorialspoint name "redis tutorial" description "redis basic commands for caching" likes 20 visitors 23000
OK
redis 127.0.0.1:6379> HGETALL tutorialspoint

1) "name"
2) "redis tutorial"
3) "description"
4) "redis basic commands for caching"
5) "likes"
6) "20"
7) "visitors"
8) "23000"


// hdel

Redis HDEL command is used to remove specified fields from the hash stored at key. Specified fields that do not exist within this hash are ignored. If key does not exist, it is treated as an empty hash and this command returns 0.

Return Value
Integer reply, the number of fields that were removed from the hash, not including specified but non existing fields.

Syntax
Basic syntax of redis HDEL command is shown below:

redis 127.0.0.1:6379> HDEL KEY_NAME FIELD1.. FIELDN 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
(integer) 1
redis 127.0.0.1:6379> HDEL myhash field1
(integer) 1
redis 127.0.0.1:6379> HDEL myhash field2
(integer) 1

// hexists

Redis HEXISTS command is used to check whether a hash field exists or not.

Return Value
Integer reply, 1 or 0.

1, if the hash contains field.

0 if the hash does not contain field, or key does not exist.

Syntax
Basic syntax of redis HEXISTS command is shown below:

redis 127.0.0.1:6379> HEXISTS KEY_NAME FIELD_NAME 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
(integer) 1
redis 127.0.0.1:6379> HEXISTS myhash field1
(integer) 1
redis 127.0.0.1:6379> HEXISTS myhash field2
(integer) 0

//hget

Redis HGET command is used to get the value associated with field in the hash stored at key.

Return Value
String reply, the value associated with field, or nil when field is not present in the hash or key does not exist.

Syntax
Basic syntax of redis HGET command is shown below:

redis 127.0.0.1:6379> HGET KEY_NAME FIELD_NAME 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
(integer) 1
redis 127.0.0.1:6379> HGET myhash field1
"foo"
redis 127.0.0.1:6379> HEXISTS myhash field2
(nil)

//  hgetall

Redis HGETALL command is used to get all fields and values of the hash stored at key. In the returned value, every field name is followed by its value, so the length of the reply is twice the size of the hash.

Return Value
Array reply, list of fields and their values stored in the hash, or an empty list when key does not exist.

Syntax
Basic syntax of redis HGETALL command is shown below:

redis 127.0.0.1:6379> HGETALL KEY_NAME 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
(integer) 1
redis 127.0.0.1:6379> HSET myhash field2 "bar"
(integer) 1
redis 127.0.0.1:6379> HGETALL myhash
1) "field1"
2) "Hello"
3) "field2"
4) "World"

//hincrby

Redis HINCRBY command is used to increment the number stored at field in the hash stored at key by increment. If key does not exist, a new key holding a hash is created. If field does not exist the value is set to 0 before the operation is performed.

Return Value
Integer reply, the value at field after the increment operation.

Syntax
Basic syntax of redis HINCRBY command is shown below:

redis 127.0.0.1:6379> HINCRBY KEY_NAME FIELD_NAME INCR_BY_NUMBER 
Example
redis 127.0.0.1:6379> HSET myhash field1 20
(integer) 1
redis 127.0.0.1:6379> HINCRBY myhash field 1
(integer) 21
redis 127.0.0.1:6379> HINCRBY myhash field -1
(integer) 20

//hincrbyfloat

Redis HINCRBYFLOAT command is used to increment the specified field of an hash stored at key, and representing a floating point number, by the specified increment. If the field does not exist, it is set to 0 before performing the operation. If the field contains a value of wrong type or specified increment is not parsable as floating point number, then an error has occured.

Return Value
String reply, the value of field after the increment.

Syntax
Basic syntax of redis HINCRBYFLOAT command is shown below:

redis 127.0.0.1:6379> HINCRBYFLOAT KEY_NAME FIELD_NAME INCR_BY_NUMBER 
Example
redis 127.0.0.1:6379> HSET myhash field 20.50
(integer) 1
redis 127.0.0.1:6379> HINCRBYFLOAT mykey field 0.1
"20.60"

//hkeys

Redis HKEYS command is used to get all field names in the hash stored at key.

Return Value
Array reply, list of fields in the hash, or an empty list when key does not exist.

Syntax
Basic syntax of redis HKEYS command is shown below:

redis 127.0.0.1:6379> HKEYS KEY_NAME FIELD_NAME INCR_BY_NUMBER 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
(integer) 1
redis 127.0.0.1:6379> HSET myhash field2 "bar"
(integer) 1
redis 127.0.0.1:6379> HKEYS myhash
1) "field1"
2) "field2"

//hlen

Redis HLEN command is used to get the number of fields contained in the hash stored at key.

Return Value
Integer reply, number of fields in the hash, or 0 when key does not exist.

Syntax
Basic syntax of redis HLEN command is shown below:

redis 127.0.0.1:6379> HLEN KEY_NAME 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
(integer) 1
redis 127.0.0.1:6379> HSET myhash field2 "bar"
(integer) 1
redis 127.0.0.1:6379> HLEN myhash
(integer) 2

//hmget

Redis HMGET command is used to get the values associated with the specified fields in the hash stored at key. If field does not exist in redis hash, then nil value is returned.

Return Value
Array reply, list of values associated with the given fields, in the same order as they are requested.

Syntax
Basic syntax of redis HMGET command is shown below:

redis 127.0.0.1:6379> HMGET KEY_NAME FIELD1...FIELDN 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
(integer) 1
redis 127.0.0.1:6379> HSET myhash field2 "bar"
(integer) 1
redis 127.0.0.1:6379> HMGET myhash field1 field2 nofield
1) "foo"
2) "bar"
3) (nil)


//hmset

Redis HMSET command is used to set the specified fields to their respective values in the hash stored at key. This command overwrites any existing fields in the hash. If key does not exist, a new key holding a hash is created.

Return Value
Simple string reply

Syntax
Basic syntax of redis HMSET command is shown below:

redis 127.0.0.1:6379> HMSET KEY_NAME FIELD1 VALUE1 ...FIELDN VALUEN 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo" field2 "bar"
OK
redis 127.0.0.1:6379> HGET myhash field1
"foo"
redis 127.0.0.1:6379> HMGET myhash field2
"bar"


//hset

Redis HSET command is used to set field in the hash stored at key to value. If key does not exist, a new key holding a hash is created. If field already exists in the hash, it is overwritten.

Return Value
Integer reply

1 if field is a new field in the hash and value was set.

0 if field already exists in the hash and the value was updated.

Syntax
Basic syntax of redis HSET command is shown below:

redis 127.0.0.1:6379> HSET KEY_NAME FIELD VALUE 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
OK
redis 127.0.0.1:6379> HGET myhash field1
"foo"

//hsetnx
Redis HSETNX command is used to set field in the hash stored at key to value, only if field does not yet exist. If key does not exist, a new key holding a hash is created. If field already exists, this operation has no effect.

Return Value
Integer reply

1 if field is a new field in the hash and value was set.

0 if field already exists in the hash and no operation was performed.

Syntax
Basic syntax of redis HSETNX command is shown below:

redis 127.0.0.1:6379> HSETNX KEY_NAME FIELD VALUE 
Example
redis 127.0.0.1:6379> HSETNX myhash field1 "foo"
(integer) 1
redis 127.0.0.1:6379> HSETNX myhash field1 "bar"
(integer) 0
redis 127.0.0.1:6379> HGET myhash field1
"foo"

//hvals

Redis HVALS command is used to get all values in the hash stored at key.

Return Value
Array reply, list of values in the hash, or an empty list when key does not exist.

Syntax
Basic syntax of redis HVALS command is shown below:

redis 127.0.0.1:6379> HVALS KEY_NAME FIELD VALUE 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
(integer) 1
redis 127.0.0.1:6379> HSET myhash field2 "bar"
(integer) 1
redis 127.0.0.1:6379> HVALS myhash
1) "foo"
2) "bar"

//hset

Redis HSET command is used to set field in the hash stored at key to value. If key does not exist, a new key holding a hash is created. If field already exists in the hash, it is overwritten.

Return Value
Integer reply

1 if field is a new field in the hash and value was set.

0 if field already exists in the hash and the value was updated.

Syntax
Basic syntax of redis HSET command is shown below:

redis 127.0.0.1:6379> HSET KEY_NAME FIELD VALUE 
Example
redis 127.0.0.1:6379> HSET myhash field1 "foo"
OK
redis 127.0.0.1:6379> HGET myhash field1
"foo"


==================================
Redis Lists
==================================

//blpop

Redis BLPOP command is used to remove and get the first element in a list, or block until one is available. BLPOP command just return the first element, if available, or block the client for specific time to execute any command.

Return Value
String reply, value of element stored at key or nil

Syntax
Basic syntax of redis BLPOP command is shown below:

redis 127.0.0.1:6379> BLPOP LIST1 LIST2 .. LISTN TIMEOUT 
Example
redis 127.0.0.1:6379> BLPOP list1 100
Above example will block the client for 100 seconds to execute any command. If any data comes in the specified key list1 then it returns otherwise after 100 seconds nil value is returned.

(nil)
(100.06s)

//brpop

Redis BRPOP command is used to remove and get the last element in a list, or block until one is available. BRPOP command just return the last element, if available, or block the client for specific time to execute any command.

Return Value
String reply, value of element stored at key or nil

Syntax
Basic syntax of redis BRPOP command is shown below:

redis 127.0.0.1:6379> BRPOP LIST1 LIST2 .. LISTN TIMEOUT 
Example
redis 127.0.0.1:6379> BRPOP list1 100
Above example will block the client for 100 seconds to execute any command. If any data comes in the specified key list1 then it returns otherwise after 100 seconds nil value is returned.

(nil)
(100.06s)


//brpoplpush

Redis BRPOPLPUSH command is used to pop a value from a list, push it to another list and return it, or block until one is available. BRPOPLPUSH command just return the last element and insert in to another list, if available, or block the client for specific time to execute any command.

Return Value
String reply, value of element stored at key or nil

Syntax
Basic syntax of redis BRPOPLPUSH command is shown below:

redis 127.0.0.1:6379> BRPOPLPUSH LIST1 ANOTHER_LIST TIMEOUT 
Example
redis 127.0.0.1:6379> BRPOPLPUSH list1 list2 100
Above example will block the client for 100 seconds to execute any command. If any data comes in the specified key list1 then it will pop data and push it into another list otherwise after 100 seconds nil value is returned.

(nil)
(100.06s)

//lindex

Redis LINDEX command is used to get the element at index index in the list stored at key. The index is zero-based, so 0 means the first element, 1 the second element and so on. Negative indices can be used to designate elements starting at the tail of the list. Here, -1 means the last element, -2 means the penultimate and so forth.

Return Value
String reply, the requested element, or nil when index is out of range.

Syntax
Basic syntax of redis LINDEX command is shown below:

redis 127.0.0.1:6379> LINDEX KEY_NAME INDEX_POSITION 
Example
redis 127.0.0.1:6379> LPUSH list1 "foo"
(integer) 1
redis 127.0.0.1:6379> LPUSH list1 "bar"
(integer) 2
redis 127.0.0.1:6379> LINDEX list1 0
"foo"
redis 127.0.0.1:6379> LINDEX list1 -1
"bar"
redis 127.0.0.1:6379> LINDEX list1 5
nil

//linsert

Redis LINSERT command inserts value in the list stored at key either before or after the reference value pivot. When key does not exist, it is considered an empty list and no operation is performed. An error is returned when key exists but does not hold a list value.

Return Value
Integer reply, the length of the list after the insert operation, or -1 when the value pivot was not found.

Syntax
Basic syntax of redis LINSERT command is shown below:

redis 127.0.0.1:6379> LINSERT KEY_NAME BEFORE EXISTING_VALUE NEW_VALUE 
Example
redis 127.0.0.1:6379> RPUSH list1 "foo"
(integer) 1
redis 127.0.0.1:6379> RPUSH list1 "bar"
(integer) 2
redis 127.0.0.1:6379> LINSERT list1 BEFORE "bar" "Yes"
(integer) 3
redis 127.0.0.1:6379> LRANGE mylist 0 -1
1) "foo"
2) "Yes"
3) "bar"

//llen

Redis LLEN command returns the length of the list stored at key. If key does not exist, it is interpreted as an empty list and 0 is returned. An error is returned when the value stored at key is not a list.

Return Value
Integer reply, the length of the list at key.

Syntax
Basic syntax of redis LLEN command is shown below:

redis 127.0.0.1:6379> LLEN KEY_NAME 
Example
redis 127.0.0.1:6379> RPUSH list1 "foo"
(integer) 1
redis 127.0.0.1:6379> RPUSH list1 "bar"
(integer) 2
redis 127.0.0.1:6379> LLEN list1
(integer) 2

//lpop

Redis LPOP command removes and returns the first element of the list stored at key.

Return Value
String reply, the value of the first element, or nil when key does not exist.

Syntax
Basic syntax of redis LPOP command is shown below:

redis 127.0.0.1:6379> LPOP KEY_NAME 
Example
redis 127.0.0.1:6379> RPUSH list1 "foo"
(integer) 1
redis 127.0.0.1:6379> RPUSH list1 "bar"
(integer) 2
redis 127.0.0.1:6379> LPOP list1
"foo"

//lpush

Redis LPUSH command insert all the specified values at the head of the list stored at key. If key does not exist, it is created as empty list before performing the push operations. When key holds a value that is not a list, an error is returned.

Return Value
Integer reply, the length of the list after the push operations.

Syntax
Basic syntax of redis LPUSH command is shown below:

redis 127.0.0.1:6379> LPUSH KEY_NAME VALUE1.. VALUEN
Example
redis 127.0.0.1:6379> LPUSH list1 "foo"
(integer) 1
redis 127.0.0.1:6379> LPUSH list1 "bar"
(integer) 2
redis 127.0.0.1:6379> LRANGE list1 0 -1
1) "foo"
2) "bar"

//lpushx

Redis LPUSHX command inserts value at the head of the list stored at key, only if key already exists and holds a list.

Return Value
Integer reply, the length of the list after the push operations.

Syntax
Basic syntax of redis LPUSHX command is shown below:

redis 127.0.0.1:6379> LPUSHX KEY_NAME VALUE1.. VALUEN
Example
redis 127.0.0.1:6379> LPUSH list1 "foo"
(integer) 1
redis 127.0.0.1:6379> LPUSHX list1 "bar"
(integer) 2
redis 127.0.0.1:6379> LPUSHX list2 "bar"
(integer) 0
redis 127.0.0.1:6379> LRANGE list1 0 -1
1) "foo"
2) "bar"

//lrange
Redis LRANGE command returns the specified elements of the list stored at key. The offsets start and stop are zero-based indexes, with 0 being the first element of the list (the head of the list), 1 being the next element and so on. These offsets can also be negative numbers indicating offsets starting at the end of the list. For example, -1 is the last element of the list, -2 the penultimate, and so on.

Return Value
Array reply, list of elements in the specified range.

Syntax
Basic syntax of redis LRANGE command is shown below:

redis 127.0.0.1:6379> LRANGE KEY_NAME START END
Example
redis 127.0.0.1:6379> LPUSH list1 "foo"
(integer) 1
redis 127.0.0.1:6379> LPUSH list1 "bar"
(integer) 2
redis 127.0.0.1:6379> LPUSHX list1 "bar"
(integer) 0
redis 127.0.0.1:6379> LRANGE list1 0 -1
1) "foo"
2) "bar"
3) "bar"

//lrem

Redis LREM command removes the first count occurrences of elements equal to value from the list stored at key. The count argument influences the operation in the following ways:

count > 0: Remove elements equal to value moving from head to tail.

count < 0: Remove elements equal to value moving from tail to head.

count = 0: Remove all elements equal to value.

Return Value
Integer reply, the number of removed elements.

Syntax
Basic syntax of redis LREM command is shown below:

redis 127.0.0.1:6379> LREM KEY_NAME COUNT VALUE
Example
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 1
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 2
redis 127.0.0.1:6379> RPUSH mylist "foo"
(integer) 3
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 4
redis 127.0.0.1:6379> LREM mylist -2 "hello"
(integer) 2

//lset

Redis LSET command sets the list element at index to value. For more information on the index argument, see LINDEX. An error is returned for out of range indexes.

Return Value
String reply, OK

Syntax
Basic syntax of redis LSET command is shown below:

redis 127.0.0.1:6379> LSET KEY_NAME INDEX VALUE
Example
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 1
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 2
redis 127.0.0.1:6379> RPUSH mylist "foo"
(integer) 3
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 4
redis 127.0.0.1:6379> LSET mylist 0 "bar"
OK
redis 127.0.0.1:6379> LRANGE mylist 0 -1
1: "bar"
2) "hello"
3) "foo"
4) "hello"

//ltrim

Redis LTRIM command trim an existing list so that it will contain only the specified range of elements specified. Both start and stop are zero-based indexes, where 0 is the first element of the list (the head), 1 the next element and so on.

Return Value
String reply, OK

Syntax
Basic syntax of redis LTRIM command is shown below:

redis 127.0.0.1:6379> LTRIM KEY_NAME START STOP
Example
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 1
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 2
redis 127.0.0.1:6379> RPUSH mylist "foo"
(integer) 3
redis 127.0.0.1:6379> RPUSH mylist "bar"
(integer) 4
redis 127.0.0.1:6379> LTRIM mylist 1 -1
OK
redis 127.0.0.1:6379> LRANGE mylist 0 -1
1) "hello"
2) "foo"
3) "bar"

//rpop

Redis RPOP command removes and returns the last element of the list stored at key.

Return Value
String reply, the value of the last element, or nil when key does not exist.

Syntax
Basic syntax of redis RPOP command is shown below:

redis 127.0.0.1:6379> RPOP KEY_NAME 
Example
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 1
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 2
redis 127.0.0.1:6379> RPUSH mylist "foo"
(integer) 3
redis 127.0.0.1:6379> RPUSH mylist "bar"
(integer) 4
redis 127.0.0.1:6379> RPOP mylist
OK
redis 127.0.0.1:6379> LRANGE mylist 0 -1
1) "hello"
2) "hello"
3) "foo"

//rpoplpush

Redis RPOPLPUSH command returns and removes the last element (tail) of the list stored at source, and pushes the element at the first element (head) of the list stored at destination.

Return Value
String reply, the element being popped and pushed.

Syntax
Basic syntax of redis RPOPLPUSH command is shown below:

redis 127.0.0.1:6379> RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME
Example
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 1
redis 127.0.0.1:6379> RPUSH mylist "foo"
(integer) 2
redis 127.0.0.1:6379> RPUSH mylist "bar"
(integer) 3
redis 127.0.0.1:6379> RPOPLPUSH mylist myotherlist
"bar"
redis 127.0.0.1:6379> LRANGE mylist 0 -1
1) "hello"
2) "foo"

//rpush

Redis RPUSH command insert all the specified values at the tail of the list stored at key. If key does not exist, it is created as empty list before performing the push operation. When key holds a value that is not a list, an error is returned.

Return Value
Integer reply, the length of the list after the push operation.

Syntax
Basic syntax of redis RPUSH command is shown below:

redis 127.0.0.1:6379> RPUSH KEY_NAME VALUE1..VALUEN
Example
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 1
redis 127.0.0.1:6379> RPUSH mylist "foo"
(integer) 2
redis 127.0.0.1:6379> RPUSH mylist "bar"
(integer) 3
redis 127.0.0.1:6379> LRANGE mylist 0 -1
1) "hello"
2) "foo"
3) "bar"

//rpushx

Redis RPUSHX command inserts value at the tail of the list stored at key, only if key already exists and holds a list. In contrary to RPUSH, no operation will be performed when key does not yet exist.

Return Value
Integer reply, the length of the list after the push operation.

Syntax
Basic syntax of redis RPUSHX command is shown below:

redis 127.0.0.1:6379> RPUSHX KEY_NAME VALUE1..VALUEN
Example
redis 127.0.0.1:6379> RPUSH mylist "hello"
(integer) 1
redis 127.0.0.1:6379> RPUSH mylist "foo"
(integer) 2
redis 127.0.0.1:6379> RPUSHX mylist2 "bar"
(integer) 0
redis 127.0.0.1:6379> LRANGE mylist 0 -1
1) "hello"
2) "foo"

=====================================
Sets
=====================================

//sadd

Redis SADD command is used to add members to set stored at key. If the member already exists, then it it ignored. If key does not exist, then a new set is created and members are added into it. If the value stored at key if not set, then an error is returned.

Return Value
Integer reply, the number of elements that were added to the set, not including all the elements already present into the set.

Syntax
Basic syntax of redis SADD command is shown below:

redis 127.0.0.1:6379> SADD KEY_NAME VALUE1..VALUEN
Example
redis 127.0.0.1:6379> SADD myset "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset "foo"
(integer) 1
redis 127.0.0.1:6379> SADD myset "hello"
(integer) 0
redis 127.0.0.1:6379> SMEMBERS myset
1) "hello"
2) "foo"

//scard

Redis SCARD command is used to number of elements stored in set.

Return Value
Integer reply, the cardinality (number of elements) of the set, or 0 if key does not exist.

Syntax
Basic syntax of redis SCARD command is shown below:

redis 127.0.0.1:6379> SCARD KEY_NAME 
Example
redis 127.0.0.1:6379> SADD myset "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset "foo"
(integer) 1
redis 127.0.0.1:6379> SADD myset "hello"
(integer) 0
redis 127.0.0.1:6379> SCARD myset
(integer) 2

//sdiff

Redis SDIFF command returns the members of the set resulting from the difference between the first set and all the successive sets. If keys does not exists in redis then it it considered as empty sets.

Return Value
Array reply, list with members of the resulting set.

Syntax
Basic syntax of redis SDIFF command is shown below:

redis 127.0.0.1:6379> SDIFF FIRST_KEY OTHER_KEY1..OTHER_KEYN 
Example
redis 127.0.0.1:6379> SADD myset "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset "foo"
(integer) 1
redis 127.0.0.1:6379> SADD myset "bar"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "world"
(integer) 1
redis 127.0.0.1:6379> SDIFF myset myset2
1) "foo"
2) "bar"

//sdiffstore

Redis SDIFFSTORE command store the members of the set, resulting from the difference between the first set and all the successive sets, into a set set specified in command. If destination already exists, it is overwritten.

Return Value
Integer reply, the number of elements in the resulting set.

Syntax
Basic syntax of redis SDIFFSTORE command is shown below:

redis 127.0.0.1:6379> SDIFFSTORE DESTINATION_KEY KEY1..KEYN 
Example
redis 127.0.0.1:6379> SADD myset "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset "foo"
(integer) 1
redis 127.0.0.1:6379> SADD myset "bar"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "world"
(integer) 1
redis 127.0.0.1:6379> SDIFFSTORE destset myset myset2
(integer) 2
redis 127.0.0.1:6379> SMEMBERS destset
1) "foo"
2) "bar"

//sinter

Redis SINTER command get elements of a set after intersection of all specified sets. Keys that do not exist are considered to be empty sets. With one of the keys being an empty set, the resulting set is also empty (since set intersection with an empty set always results in an empty set).

Return Value
Array reply, list with members of the resulting set.

Syntax
Basic syntax of redis SINTER command is shown below:

redis 127.0.0.1:6379> SINTER KEY KEY1..KEYN 
Example
redis 127.0.0.1:6379> SADD myset "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset "foo"
(integer) 1
redis 127.0.0.1:6379> SADD myset "bar"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "world"
(integer) 1
redis 127.0.0.1:6379> SINTER myset myset2
1) "hello"

//sinterstore

Redis SINTERSTORE command store the elements in a set after intersection of all specified sets. Keys that do not exist are considered to be empty sets. With one of the keys being an empty set, the resulting set is also empty (since set intersection with an empty set always results in an empty set).

Return Value
Integer reply, the number of elements in the resulting set.

Syntax
Basic syntax of redis SINTERSTORE command is shown below:

redis 127.0.0.1:6379> SINTERSTORE DESTINATION_KEY KEY KEY1..KEYN 
Example
redis 127.0.0.1:6379> SADD myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "foo"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "bar"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "world"
(integer) 1
redis 127.0.0.1:6379> SINTERSTORE myset myset1 myset2
(integer) 1
redis 127.0.0.1:6379> SMEMBERS myset
1) "hello"

//sismember

Redis SISMEMBER returns, element is already exist in set stored at key key or not.

Return Value
Integer reply,

1 if the element is a member of the set.

0 if the element is not a member of the set, or if key does not exist.

Syntax
Basic syntax of redis SISMEMBER command is shown below:

redis 127.0.0.1:6379> SISMEMBER KEY VALUE 
Example
redis 127.0.0.1:6379> SADD myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SISMEMBER myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SISMEMBER myset1 "world"
(integer) 0

//smember

SMEMBERS key 
Get all the members in a set

//smove

Redis SMOVE command is used to move an element of a set from one key to another key. If the source set does not exist or does not contain the specified element, no operation is performed and 0 is returned. Otherwise, the element is removed from the source set and added to the destination set. When the specified element already exists in the destination set, it is only removed from the source set. An error is returned if source or destination does not hold a set value.

Return Value
Integer reply.

1 if the element is moved.

0 if the element is not a member of source and no operation was performed.

Syntax
Basic syntax of redis SMOVE command is shown below:

redis 127.0.0.1:6379> SMOVE SOURCE DESTINATION MEMBER 
Example
redis 127.0.0.1:6379> SADD myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "world"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "bar"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "foo"
(integer) 1
redis 127.0.0.1:6379> SMOVE myset1 myset2 "bar"
(integer) 1
redis 127.0.0.1:6379> SMEMBERS myset1
1) "World"
2) "Hello"
redis 127.0.0.1:6379> SMEMBERS myset2
1) "foo"
2) "bar"

//spop

Redis SPOP command is used to remove and return a random member from set stored at specified key.

Return Value
String reply, the removed element, or nil when key does not exist.

Syntax
Basic syntax of redis SPOP command is shown below:

redis 127.0.0.1:6379> SPOP KEY 
Example
redis 127.0.0.1:6379> SADD myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "world"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "bar"
(integer) 1
redis 127.0.0.1:6379> SPOP myset1
"bar"
redis 127.0.0.1:6379> SMEMBERS myset1
1) "Hello"
2) "world"


//srandmember

Redis SRANDMEMBER command is used to get a random member from set stored at specified key. If called with the additional count argument, return an array of count distinct elements if count is positive. If called with a negative count the behavior changes and the command is allowed to return the same element multiple times. In this case the numer of returned elements is the absolute value of the specified count.

Return Value
String reply, without the additional count argument the command returns a Bulk Reply with the randomly selected element, or nil when key does not exist. Array reply, when the additional count argument is passed the command returns an array of elements, or an empty array when key does not exist.

Syntax
Basic syntax of redis SRANDMEMBER command is shown below:

redis 127.0.0.1:6379> SRANDMEMBER KEY [count]
Example
redis 127.0.0.1:6379> SADD myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "world"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "bar"
(integer) 1
redis 127.0.0.1:6379> SRANDMEMBER myset1
"bar"
redis 127.0.0.1:6379> SRANDMEMBER myset1 2
1) "Hello"
2) "world"

//srem

Redis SREM command is used to remove the specified member from the set stored at key. If member does not exist, then command returns just 0. If stored value at key is not set, then an error is returned.

Return Value
Integer reply, the number of members that were removed from the set, not including non existing members.

Syntax
Basic syntax of redis SREM command is shown below:

redis 127.0.0.1:6379> SREM KEY MEMBER1..MEMBERN
Example
redis 127.0.0.1:6379> SADD myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "world"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "bar"
(integer) 1
redis 127.0.0.1:6379> SREM myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SREM myset1 "foo"
(integer) 0
redis 127.0.0.1:6379> SMEMBERS myset1
1) "bar"
2) "world"

//sunion

Redis SUNION command is used to get the members of the set resulting from the union of all the given sets. Keys that do not exist are considered to be empty sets.

Return Value
Array reply, list with members of the resulting set.

Syntax
Basic syntax of redis SUNION command is shown below:

redis 127.0.0.1:6379> SUNION KEY KEY1..KEYN
Example
redis 127.0.0.1:6379> SADD myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "world"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "bar"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "bar"
(integer) 1
redis 127.0.0.1:6379> SUNION myset1 myset2
1) "bar"
2) "world"
3) "hello"
4) "foo"

//sunionstore

Redis SUNIONSTORE command is used to store, the members of the set resulting from the union of all the given sets. Keys that do not exist are considered to be empty sets.

Return Value
Integer reply, the number of elements in the resulting set.

Syntax
Basic syntax of redis SUNIONSTORE command is shown below:

redis 127.0.0.1:6379> SUNIONSTORE DESTINATION KEY KEY1..KEYN
Example
redis 127.0.0.1:6379> SADD myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "world"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "bar"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset2 "bar"
(integer) 1
redis 127.0.0.1:6379> SUNIONSTORE myset myset1 myset2
(integer) 1
redis 127.0.0.1:6379> SMEMBERS myset
1) "bar"
2) "world"
3) "hello"
4) "foo"

//sscan

Redis SSCAN command iterates elements of a set stored at specified key.

Return Value
Array reply.

Syntax
Basic syntax of redis SSCAN command is shown below:

redis 127.0.0.1:6379> SSCAN KEY [MATCH pattern] [COUNT count]
Example
redis 127.0.0.1:6379> SADD myset1 "hello"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "hi"
(integer) 1
redis 127.0.0.1:6379> SADD myset1 "bar"
(integer) 1
redis 127.0.0.1:6379> sscan myset1 0 match h*
1) "0"
2) 1) "hello"
   2) "h1"


=============================================
Sorted sets
=============================================

//ZADD
Redis ZADD command add all the specified members with the specified scores to the sorted set stored at key. It is possible to specify multiple score / member pairs. If a specified member is already a member of the sorted set, the score is updated and the element reinserted at the right position to ensure the correct ordering. If key does not exist, a new sorted set with the specified members as sole members is created, like if the sorted set was empty. If the key exists but does not hold a sorted set, an error is returned.

Return Value
Integer reply, The number of elements added to the sorted sets, not including elements already existing for which the score was updated.

Syntax
Basic syntax of redis ZADD command is shown below:

redis 127.0.0.1:6379> ZADD KEY_NAME SCORE1 VALUE1.. SCOREN VALUEN
Example
redis 127.0.0.1:6379> ZADD myset 1 "hello"
(integer) 1
redis 127.0.0.1:6379> ZADD myset 1 "foo"
(integer) 1
redis 127.0.0.1:6379> ZADD myset 2 "world" 3 "bar"
(integer) 2
redis 127.0.0.1:6379> ZRANGE myzset 0 -1 WITHSCORES
1) "hello"
2) "1"
3) "foo"
4) "1"
5) "world"
6) "2"
7) "bar"
8) "3"


//ZCARD

Redis ZCARD command returns the number of elements stored in set at specified key.

Return Value
Integer reply, the cardinality (number of elements) of the sorted set, or 0 if key does not exist.

Syntax
Basic syntax of redis ZCARD command is shown below:

redis 127.0.0.1:6379> ZCARD KEY_NAME
Example
redis 127.0.0.1:6379> ZADD myset 1 "hello"
(integer) 1
redis 127.0.0.1:6379> ZADD myset 1 "foo"
(integer) 1
redis 127.0.0.1:6379> ZADD myset 2 "world" 3 "bar"
(integer) 2
redis 127.0.0.1:6379> ZCARD myzset
(integer) 4

//ZCOUNT

Redis ZCOUNT command returns the number of elements in the sorted set at key with a score between min and max.

Return Value
Integer reply, the number of elements in the specified score range.

Syntax
Basic syntax of redis ZCOUNT command is shown below:

redis 127.0.0.1:6379> ZCOUNT KEY_NAME
Example
redis 127.0.0.1:6379> ZADD myset 1 "hello"
(integer) 1
redis 127.0.0.1:6379> ZADD myset 1 "foo"
(integer) 1
redis 127.0.0.1:6379> ZADD myset 2 "world" 3 "bar"
(integer) 2
redis 127.0.0.1:6379> ZCOUNT myzset (1 3
(integer) 2

//ZINCRBY

Redis ZINCRBY command increment the score of member in the sorted set stored at key by increment. If member does not exist in the sorted set, it is added with increment as its score (as if its previous score was 0.0). If key does not exist, a new sorted set with the specified member as its sole member is created. An error is returned when key exists but does not hold a sorted set.

Return Value
String reply, the new score of member (a double precision floating point number), represented as string.

Syntax
Basic syntax of redis ZINCRBY command is shown below:

redis 127.0.0.1:6379> ZINCRBY KEY INCREMENT MEMBER
Example
redis 127.0.0.1:6379> ZADD myset 1 "hello"
(integer) 1
redis 127.0.0.1:6379> ZADD myset 1 "foo"
(integer) 1
redis 127.0.0.1:6379> ZINCRBY myzset 2 "hello"
(integer) 3
redis 127.0.0.1:6379> ZRANGE myzset 0 -1 WITHSCORES
1) "foo"
2) "2"
3) "hello"
4) "3"

//ZINTERSTORE

Redis ZINTERSTORE command computes the intersection of numkeys sorted sets given by the specified keys, and stores the result in destination. It is mandatory to provide the number of input keys (numkeys) before passing the input keys and the other (optional) arguments.

Return Value
Integer reply, the number of elements in the resulting sorted set at destination.

Syntax
Basic syntax of redis ZINTERSTORE command is shown below:

redis 127.0.0.1:6379> ZINTERSTORE KEY INCREMENT MEMBER
Example
redis 127.0.0.1:6379> ZADD myset 1 "hello"
(integer) 1
redis 127.0.0.1:6379> ZADD myset 2 "world"
(integer) 1
redis 127.0.0.1:6379> ZADD myset2 1 "hello"
(integer) 1
redis 127.0.0.1:6379> ZADD myset2 2 "world"
(integer) 1
redis 127.0.0.1:6379> ZADD myset2 3 "foo"
(integer) 1
redis 127.0.0.1:6379> ZINTERSTORE out 2 myset1 myset2 WEIGHTS 2 3"
(integer) 3
redis 127.0.0.1:6379> ZRANGE out 0 -1 WITHSCORES
1) "hello"
2) "5"
3) "world"
4) "10"

//ZLEXCOUNT

When all the elements in a sorted set are inserted with the same score, in order to force lexicographical ordering, this command returns the number of elements in the sorted set at key with a value between min and max.

Return Value
Integer reply, the number of elements in the specified score range.

Syntax
Basic syntax of redis ZLEXCOUNT command is shown below:

redis 127.0.0.1:6379> ZLEXCOUNT KEY MIN MAX
Example
redis 127.0.0.1:6379> ZADD myzset 0 a 0 b 0 c 0 d 0 e
(integer) 5
redis 127.0.0.1:6379> ZADD myzset 0 f 0 g
(integer) 2
redis 127.0.0.1:6379> ZLEXCOUNT myzset - +
(integer) 7
redis 127.0.0.1:6379> ZLEXCOUNT myzset [b [f
(integer) 5

//ZRANGE

Redis ZRANGE command returns the specified range of elements in the sorted set stored at key. The elements are considered to be ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score. Both start and stop are zero-based indexes, where 0 is the first element, 1 is the next element and so on. They can also be negative numbers indicating offsets from the end of the sorted set, with -1 being the last element of the sorted set, -2 the penultimate element and so on.

Return Value
Array reply, list of elements in the specified range (optionally with their scores).

Syntax
Basic syntax of redis ZRANGE command is shown below:

redis 127.0.0.1:6379> ZRANGE KEY START STOP [WITHSCORES]
Example
redis 127.0.0.1:6379> ZADD myzset 0 a 0 b 0 c 0 d 0 e
(integer) 5
redis 127.0.0.1:6379> ZADD myzset 0 f 0 g
(integer) 2
redis 127.0.0.1:6379> ZRANGE myzset 0 -1
1) "a"
2) "b"
3) "c"
4) "d"
5) "e"
6) "f"
7) "g"
redis 127.0.0.1:6379> ZLEXCOUNT myzset [b [f
(integer) 5

//ZRANGEBYLEX

Redis ZRANGEBYLEX command returns the specified range of elements in the sorted set stored at key. The elements are considered to be ordered from the lowest to the highest score. Lexicographical order is used for elements with equal score. Both start and stop are zero-based indexes, where 0 is the first element, 1 is the next element and so on. They can also be negative numbers indicating offsets from the end of the sorted set, with -1 being the last element of the sorted set, -2 the penultimate element and so on.

Return Value
Array reply, list of elements in the specified score range.

Syntax
Basic syntax of redis ZRANGEBYLEX command is shown below:

redis 127.0.0.1:6379> ZRANGEBYLEX key min max [LIMIT offset count]
Example
redis 127.0.0.1:6379> ZADD myzset 0 a 0 b 0 c 0 d 0 e
(integer) 5
redis 127.0.0.1:6379> ZADD myzset 0 f 0 g
(integer) 2
redis 127.0.0.1:6379> ZRANGEBYLEX myzset - [c
1) "a"
2) "b"
3) "c"
redis 127.0.0.1:6379> ZRANGEBYLEX myzset - (c
1) "a"
2) "b"


//ZRANGEBYSCORE

Redis ZRANGEBYSCORE command returns all the elements in the sorted set at key with a score between min and max (including elements with score equal to min or max). The elements are considered to be ordered from low to high scores. The elements having the same score are returned in lexicographical order (this follows from a property of the sorted set implementation in Redis and does not involve further computation).

Return Value
Array reply, list of elements in the specified score range (optionally with their scores).

Syntax
Basic syntax of redis ZRANGEBYSCORE command is shown below:

redis 127.0.0.1:6379> ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]
Example
redis 127.0.0.1:6379> ZADD myzset 0 a 1 b 2 c 3 d 4 e
(integer) 5
redis 127.0.0.1:6379> ZADD myzset 5 f 6 g
(integer) 2
redis 127.0.0.1:6379> ZRANGEBYSCORE myzset 1 2
1) "b"
2) "c"
redis 127.0.0.1:6379> ZRANGEBYSCORE myzset (1 2
1) "b"


//ZRANK

Redis ZRANK command returns the rank of member in the sorted set stored at key, with the scores ordered from low to high. The rank (or index) is 0-based, which means that the member with the lowest score has rank 0.

Return Value
If member exists in the sorted set, Integer reply: the rank of member.

If member does not exist in the sorted set or key does not exist, Bulk string reply, nil.

Syntax
Basic syntax of redis ZRANK command is shown below:

redis 127.0.0.1:6379> ZRANK key member
Example
redis 127.0.0.1:6379> ZADD myzset 0 a 1 b 2 c 3 d 4 e
(integer) 5
redis 127.0.0.1:6379> ZADD myzset 5 f 6 g
(integer) 2
redis 127.0.0.1:6379> ZRANK myzset b
(integer) 1
redis 127.0.0.1:6379> ZRANK myzset t
nil

//ZREM

Redis ZREM command removes the specified members from the sorted set stored at key. Non existing members are ignored. An error is returned when key exists and does not hold a sorted set.

Return Value
Integer, number of members removed from the sorted set, not including non existing members.

Syntax
Basic syntax of redis ZREM command is shown below:

redis 127.0.0.1:6379> ZREM key member [member ...]
Example
redis 127.0.0.1:6379> ZADD myzset 0 a 1 b 2 c 3 d 4 e
(integer) 5
redis 127.0.0.1:6379> ZREM myzset b
(integer) 1
redis 127.0.0.1:6379> ZRANGE myzset 0 -1 WITHSCORES
1) "a"
2) "0"
3) "c"
4) "2"
5) "d"
6) "3"
7) "e"
8) "4"

//ZREMRANGEBYLEX

Redis ZREMRANGEBYLEX command removes all elements in the sorted set stored at key between the lexicographical range specified by min and max.

Return Value
Integer reply, the number of elements removed.

Syntax
Basic syntax of redis ZREMRANGEBYLEX command is shown below:

redis 127.0.0.1:6379> ZREMRANGEBYLEX key min max
Example
redis 127.0.0.1:6379> ZADD myzset 0 a 1 b 2 c 3 d 4 e
(integer) 5
redis 127.0.0.1:6379> ZREMRANGEBYLEX myzset 0 -1
(integer) 1
redis 127.0.0.1:6379> ZRANGE myzset 0 -1 WITHSCORES


//ZREMRANGEBYRANK

Redis ZREMRANGEBYRANK command removes all elements in the sorted set stored at key with rank between start and stop. Both start and stop are 0 -based indexes with 0 being the element with the lowest score. These indexes can be negative numbers, where they indicate offsets starting at the element with the highest score. For example: -1 is the element with the highest score, -2 the element with the second highest score and so forth.

Return Value
Integer reply, the number of elements removed.

Syntax
Basic syntax of redis ZREMRANGEBYRANK command is shown below:

redis 127.0.0.1:6379> ZREMRANGEBYRANK key start stop
Example
redis 127.0.0.1:6379> ZADD myzset 1 b 2 c 3 d 4 e
(integer) 4
redis 127.0.0.1:6379> ZREMRANGEBYRANK myzset 0 3
(integer) 3
redis 127.0.0.1:6379> ZRANGE myzset 0 -1 WITHSCORES
1) "e"
2) "4"

//ZREMRANGEBYSCORE

Redis ZREMRANGEBYSCORE command removes all elements in the sorted set stored at key with a score between min and max (inclusive).

Return Value
Integer reply, the number of elements removed.

Syntax
Basic syntax of redis ZREMRANGEBYSCORE command is shown below:

redis 127.0.0.1:6379> ZREMRANGEBYSCORE key min max
Example
redis 127.0.0.1:6379> ZADD myzset 1 b 2 c 3 d 4 e
(integer) 4
redis 127.0.0.1:6379> ZREMRANGEBYSCORE myzset -inf (2
(integer) 1
redis 127.0.0.1:6379> ZRANGE myzset 0 -1 WITHSCORES
1) "b"
2) "2"
3) "c"
4) "3"
5) "d"
6) "4"
7) "e"
8) "5"

//ZREVRANGE

Redis ZREVRANGE command returns the specified range of elements in the sorted set stored at key. The elements are considered to be ordered from the highest to the lowest score. Descending lexicographical order is used for elements with equal score.

Return Value
Array reply, list of elements in the specified range (optionally with their scores).

Syntax
Basic syntax of redis ZREVRANGE command is shown below:

redis 127.0.0.1:6379> ZREVRANGE key min max
Example
redis 127.0.0.1:6379> ZADD myzset 1 b 2 c 3 d 4 e
(integer) 4
redis 127.0.0.1:6379> ZREVRANGE myzset 0 -1
1) "e"
2) "d"
3) "c"
4) "b"

//ZREVRANGEBYSCORE

Redis ZREVRANGEBYSCORE command returns all the elements in the sorted set at key with a score between max and min (including elements with score equal to max or min). In contrary to the default ordering of sorted sets, for this command the elements are considered to be ordered from high to low scores. The elements having the same score are returned in reverse lexicographical order.

Return Value
Array reply, list of elements in the specified score range (optionally with their scores).

Syntax
Basic syntax of redis ZREVRANGEBYSCORE command is shown below:

redis 127.0.0.1:6379> ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]
Example
redis 127.0.0.1:6379> ZADD myzset 1 b 2 c 3 d 4 e
(integer) 4
redis 127.0.0.1:6379> ZREVRANGEBYSCORE myzset +inf -inf
1) "e"
2) "d"
3) "c"
4) "b"
redis 127.0.0.1:6379> ZREVRANGEBYSCORE myzset 2 1
1) "c"
2) "b"


//ZREVRANK

Redis ZREVRANK command returns the rank of member in the sorted set stored at key, with the scores ordered from high to low. The rank (or index) is 0-based, which means that the member with the highest score has rank 0.

Return Value
If member exists in the sorted set, Integer reply: the rank of member.

If member does not exist in the sorted set or key does not exist, Bulk string reply: nil.

Syntax
Basic syntax of redis ZREVRANK command is shown below:

redis 127.0.0.1:6379> ZREVRANK key member
Example
redis 127.0.0.1:6379> ZADD myzset 1 b 2 c 3 d 4 e
(integer) 4
redis 127.0.0.1:6379> ZREVRANK myzset "c"
(integer) 3
redis 127.0.0.1:6379> ZREVRANK myzset "y"
(nil)

//ZSCORE

Redis ZSCORE command returns the score of member in the sorted set at key. If member does not exist in the sorted set, or key does not exist, nil is returned.

Return Value
Bulk string reply, the score of member (a double precision floating point number), represented as string.

Syntax
Basic syntax of redis ZSCORE command is shown below:

redis 127.0.0.1:6379> ZSCORE key member
Example
redis 127.0.0.1:6379> ZADD myzset 1 b 2 c 3 d 4 e
(integer) 4
redis 127.0.0.1:6379> ZSCORE myzset "c"
(integer) 3
redis 127.0.0.1:6379> ZSCORE myzset "y"
(nil)


//ZUNIONSTORE

Redis ZUNIONSTORE command calculates the union of numkeys sorted sets given by the specified keys, and stores the result in destination. It is mandatory to provide the number of input keys (numkeys) before passing the input keys and the other (optional) arguments.

Return Value
Integer reply, the number of elements in the resulting sorted set at destination.

Syntax
Basic syntax of redis ZUNIONSTORE command is shown below:

redis 127.0.0.1:6379> ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX]
Example
redis 127.0.0.1:6379> ZADD myzset1 1 b 2 c
(integer) 2
redis 127.0.0.1:6379> ZADD myzset2 1 b 2 c 3 d
(integer) 3
redis 127.0.0.1:6379> ZUNIONSTORE out 2 myzset1 myzset2 WEIGHTS 2 3
(integer) 3
redis 127.0.0.1:6379> ZRANGE out 0 -1 WITHSCORES
1) "b"
2) "5"
3) "c"
4) "9"
5) "d"
6) "10"

//ZSCAN

Redis ZSCAN command iterates elements of Sorted Set types and their associated scores.

Return Value
Array reply.

Syntax
Basic syntax of redis ZSCAN command is shown below:

redis 127.0.0.1:6379> ZSCAN key cursor [MATCH pattern] [COUNT count]

===============================
HyperLogLog
===============================

Redis HyperLogLog is a algorithm that use randomization in order to provide an approximation of the number of unique elements in a set using just a constant, and small,
 amount of memory.
HyperLogLog provides a very good approximation of the cardinality of a set even using a very small amount of memory around 12 kbytes per key with a standard error 
of 0.81% and there is no limit to the number of items you can count, unless you approach 264 items.

//PFADD

Redis PFADD command adds all the element arguments to the HyperLogLog data structure stored at the key name specified as first argument.

Return Value
Integer reply, 1 or 0.

Syntax
Basic syntax of redis PFADD command is shown below:

redis 127.0.0.1:6379> PFADD KEY_NAME ELEMENTS_TO_BE_ADDED
Example
redis 127.0.0.1:6379> PFADD mykey a b c d e f g h i j
(integer) 1
redis 127.0.0.1:6379> PFCOUNT mykey
(integer) 10

//PFCOUNT

Redis PFCOUNT command is used to get the approximated cardinality computed by the HyperLogLog data structure stored at the specified variable. If key does not exist, then it returns 0.

Return Value
Integer reply, approximated number of unique elements.

When PFCOUNT command is used with multiple keys, then it returns approximated cardinality of the union of the HyperLogLogs.

Syntax
Basic syntax of redis PFADD command is shown below:

redis 127.0.0.1:6379> PFCOUNT KEY1 KEY@... KEYN
Example
redis 127.0.0.1:6379> PFADD mykey a b c d e f g h i j
(integer) 1
redis 127.0.0.1:6379> PFCOUNT mykey
(integer) 10
redis 127.0.0.1:6379> PFCOUNT mykey
(integer) 10
redis 127.0.0.1:6379> PFCOUNT mykey mynewkey
(integer) 10

//PFMERGE

Redis PFMERGE command is used to merge multiple HyperLogLog values into an unique value that will approximate the cardinality of the union of the observed Sets of the source HyperLogLog structures.

Return Value
Simple string reply OK

Syntax
Basic syntax of redis PFMERGE command is shown below:

redis 127.0.0.1:6379> PFMERGE KEY1 KEY@... KEYN
Example
redis 127.0.0.1:6379> PFADD hll1 foo bar zap a
(integer) 1
redis 127.0.0.1:6379> PFADD hll2 a b c foo
(integer) 1
redis 127.0.0.1:6379> PFMERGE hll3 hll1 hll2
OK
redis 127.0.0.1:6379> PFCOUNT hll3
(integer) 6


==============================================
PUBLISH/SUBSCRIBE
==============================================

Redis pub sub implements the messaging system where senders (in redis terminology called publishers) sends the messages while receivers (subscribers) receive them. 
The link by which messages are transferred is called channel.
In redis a client can subscribe any number of channels.


Example
Following example explains how publish subscriber concept works. In the below given example one client subscribe a channel named redisChat

redis 127.0.0.1:6379> SUBSCRIBE redisChat

Reading messages... (press Ctrl-C to quit)
1) "subscribe"
2) "redisChat"
3) (integer) 1

Now, two clients are publishing the messages on same channel named redisChat and above subscribed client is receiving messages.

redis 127.0.0.1:6379> PUBLISH redisChat "Redis is a great caching technique"

(integer) 1

redis 127.0.0.1:6379> PUBLISH redisChat "Learn redis by tutorials point"

(integer) 1


1) "message"
2) "redisChat"
3) "Redis is a great caching technique"
1) "message"
2) "redisChat"
3) "Learn redis by tutorials point"


//PSUBSCRIBE

Redis PSUBSCRIBE command is used to subscribe to channels matching the given patterns.

Syntax
Basic syntax of redis PSUBSCRIBE command is shown below:

redis 127.0.0.1:6379> PSUBSCRIBE CHANNEL_NAME_OR_PATTERN [PATTERN...]
Following listing shows some supported patterns in redis

h?llo subscribes to hello, hallo and hxllo

h*llo subscribes to hllo and heeeello

h[ae]llo subscribes to hello and hallo, but not hillo

Example
redis 127.0.0.1:6379> PSUBSCRIBE mychannel
Reading messages... (press Ctrl-C to quit)
1) "psubscribe"
2) "mychannel"
3) (integer) 1

//Pubsub

Redis PUBSUB command is an introspection command that allows to inspect the state of the Pub/Sub subsystem. It is composed of subcommands that are documented separately.

Syntax
Basic syntax of redis PUBSUB command is shown below:

redis 127.0.0.1:6379> PUBSUB subcommand [argument [argument ...]]
Return Value
Array reply, a list of active channels.

Example
redis 127.0.0.1:6379> PUBSUB CHANNELS
(empty list or set)


//publish

Redis PUBLISH command post a message to a channel.

Syntax
Basic syntax of redis PUBLISH command is shown below:

redis 127.0.0.1:6379> PUBLISH channel message
Return Value
Integer reply: the number of clients that received the message.

Example
redis 127.0.0.1:6379> PUBLISH mychannel "hello, i m here"
(integer) 1


//punsubscribe

Redis PUNSUBSCRIBE command unsubscribes the client from the given patterns, or from all of them if none is given. When no patterns are specified, the client is unsubscribed from all the previously subscribed patterns. In this case, a message for every unsubscribed pattern will be sent to the client.

Syntax
Basic syntax of redis PUNSUBSCRIBE command is shown below:

redis 127.0.0.1:6379> PUNSUBSCRIBE [pattern [pattern ...]]
Return Value
Array reply.

Example
redis 127.0.0.1:6379> PUNSUBSCRIBE mychannel 
1) "punsubscribe"
2) "a"
3) (integer) 1


//subscribe

Redis SUBSCRIBE command subscribes the client to the specified channels.

Syntax
Basic syntax of redis SUBSCRIBE command is shown below:

redis 127.0.0.1:6379> SUBSCRIBE channel [channel ...]
Return Value
Array reply.

Example
redis 127.0.0.1:6379> SUBSCRIBE mychannel 
Reading messages... (press Ctrl-C to quit)
1) "subscribe"
2) "mychannel"
3) (integer) 1
1) "message"
2) "mychannel"
3) "a"

//unsubscribe

Redis UNSUBSCRIBE command unsubscribes the client from the given channels, or from all of them if none is given.

Syntax
Basic syntax of redis UNSUBSCRIBE command is shown below:

redis 127.0.0.1:6379> UNSUBSCRIBE channel [channel ...]
Return Value
Array reply.

Example
redis 127.0.0.1:6379> UNSUBSCRIBE mychannel 
1) "unsubscribe"
2) "a"
3) (integer) 0



===============================================
Transactions
===============================================

Redis transactions allow the execution of a group of commands in a single step. Transactions has two properties in it, which are described below:

All commands in a transaction are sequentially executed as a single isolated operation. It is not possible that a request issued by another client is served in the middle of the execution of a Redis transaction.
Redis transaction is also atomic. Atomic means either all of the commands or none are processed.

Eg:

Redis transaction is initiated by command MULTI and then you need to pass list of commands that should be executed in transaction and after that whole transaction is executed by EXEC command.

redis 127.0.0.1:6379> MULTI
OK
List of commands here
redis 127.0.0.1:6379> EXEC
Example
Following example explains how redis transaction can be initiated and executed.

redis 127.0.0.1:6379> MULTI
OK
redis 127.0.0.1:6379> SET tutorial redis
QUEUED
redis 127.0.0.1:6379> GET tutorial
QUEUED
redis 127.0.0.1:6379> INCR visitors
QUEUED
redis 127.0.0.1:6379> EXEC

1) OK
2) "redis"
3) (integer) 1


// DISCARD
discards all commands after multi


//exec

Redis EXEC command executes all previously queued commands in a transaction and restores the connection state to normal.

Return Value
Array reply, each element being the reply to each of the commands in the atomic transaction.

Syntax
Basic syntax of redis EXEC command is shown below:

redis 127.0.0.1:6379> EXEC 

//multi

Redis MULTI command marks the start of a transaction block. Subsequent commands will be queued for atomic execution using EXEC.

Return Value
Simple string reply: always OK.

Syntax
Basic syntax of redis MULTI command is shown below:

redis 127.0.0.1:6379> MULTI 


//unwatch

Redis UNWATCH command flushes all the previously watched keys for a transaction.

Return Value
Simple string reply: always OK.

Syntax
Basic syntax of redis UNWATCH command is shown below:

redis 127.0.0.1:6379> UNWATCH 


//watch

Redis WATCH command marks the given keys to be watched for conditional execution of a transaction.

Return Value
Simple string reply: always OK.

Syntax
Basic syntax of redis WATCH command is shown below:

redis 127.0.0.1:6379> WATCH key [key ...] 


========================================
SCRIPTING
========================================

Redis scripting is used to evaluate scripts using the Lua interpreter. It is built into Redis starting from version 2.6.0. Command used for scripting is EVAL command.

Syntax
Basic syntax of EVAL command is as follows:

redis 127.0.0.1:6379> EVAL script numkeys key [key ...] arg [arg ...]
Example
Following example explains how redis scripting works:

redis 127.0.0.1:6379> EVAL "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 key1 key2 first second

1) "key1"
2) "key2"
3) "first"
4) "second"



//eval

Redis EVAL command is used to evaluate scripts using the Lua interpreter. The first argument of EVAL is a Lua 5.1 script. The script does not need to define a Lua function (and should not). It is just a Lua program that will run in the context of the Redis server. The second argument of EVAL is the number of arguments that follows the script (starting from the third argument) that represent Redis key names. This arguments can be accessed by Lua using the KEYS global variable in the form of a one-based array (so KEYS[1], KEYS[2], ...). All the additional arguments should not represent key names and can be accessed by Lua using the ARGV global variable, very similarly to what happens with keys (so ARGV[1], ARGV[2], ...).

Syntax
Basic syntax of redis EVAL command is shown below:

redis 127.0.0.1:6379> EVAL script numkeys key [key ...] arg [arg ...] 
Example
redis 127.0.0.1:6379> eval "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 key1 key2 first second
1) "key1"
2) "key2"
3) "first"
4) "second"

//evalsha

Redis EVALSHA command evaluates a script cached on the server side by its SHA1 digest. Scripts are cached on the server side using the SCRIPT LOAD command. The command is otherwise identical to EVAL.

Syntax
Basic syntax of redis EVALSHA command is shown below:

redis 127.0.0.1:6379> EVALSHA sha1 numkeys key [key ...] arg [arg ...] 
Example
redis 127.0.0.1:6379> EVALSHA "return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}" 2 key1 key2 first second
1) "key1"
2) "key2"
3) "first"
4) "second"

//exists

Redis SCRIPT EXISTS command returns information about the existence of the scripts in the script cache. This command accepts one or more SHA1 digests and returns a list of ones or zeros to signal if the scripts are already defined or not inside the script cache. This can be useful before a pipelining operation to ensure that scripts are loaded (and if not, to load them using SCRIPT LOAD) so that the pipelining operation can be performed solely using EVALSHA instead of EVAL to save bandwidth.

Syntax
Basic syntax of redis SCRIPT EXISTS command is shown below:

redis 127.0.0.1:6379> SCRIPT EXISTS script [script ...] 
Return Value
Array reply The command returns an array of integers that correspond to the specified SHA1 digest arguments. For every corresponding SHA1 digest of a script that actually exists in the script cache, an 1 is returned, otherwise 0 is returned.

Example
redis 127.0.0.1:6379> SCRIPT LOAD "return 1"
ERR Unknown or disabled command 'SCRIPT'
redis 127.0.0.1:6379> SCRIPT EXISTS ff9d4800c877a703b823dsdsfsffewfwefwefweac0578ff8db
ERR Unknown or disabled command 'SCRIPT'

//flush

Redis SCRIPT FLUSH command flushes the Lua scripts cache.

Syntax
Basic syntax of redis SCRIPT FLUSH command is shown below:

redis 127.0.0.1:6379> SCRIPT FLUSH 
Return Value
Simple string reply

Example
redis 127.0.0.1:6379> SCRIPT FLUSH
OK

//kill

Redis SCRIPT KILL command kills the currently executing Lua script, assuming no write operation was yet performed by the script. This command is mainly useful to kill a script that is running for too much time(for instance because it entered an infinite loop because of a bug). The script will be killed and the client currently blocked into EVAL will see the command returning with an error. If the script already performed write operations it can not be killed in this way because it would violate Lua script atomicity contract. In such a case only SHUTDOWN NOSAVE is able to kill the script, killing the Redis process in an hard way preventing it to persist with half-written information.

Syntax
Basic syntax of redis SCRIPT KILL command is shown below:

redis 127.0.0.1:6379> SCRIPT KILL 
Return Value
Simple string reply

Example
redis 127.0.0.1:6379> SCRIPT KILL
OK

//load

Redis SCRIPT LOAD command load a script into the scripts cache, without executing it. After the specified command is loaded into the script cache it will be callable using EVALSHA with the correct SHA1 digest of the script, exactly like after the first successful invocation of EVAL. The script is guaranteed to stay in the script cache forever (unless SCRIPT FLUSH is called). The command works in the same way even if the script was already present in the script cache.

Syntax
Basic syntax of redis SCRIPT LOAD command is shown below:

redis 127.0.0.1:6379> SCRIPT LOAD script
Return Value
Bulk string reply This command returns the SHA1 digest of the script added into the script cache.

Example
redis 127.0.0.1:6379> SCRIPT LOAD "return 1"
"e0e1f9fabfc9d4800c877a703b823ac0578ff8db"


=========================================================
Connections
=========================================================

Redis connection commands are basically used to manage client connections with redis server.

Example
Following example explains how a client authenticate itself to redis server and checks whether server is running or not.

redis 127.0.0.1:6379> AUTH "password"
OK
redis 127.0.0.1:6379> PING
PONG


//auth

Redis AUTH command is used to authenticate to the server with given password. If password matches the password in the configuration file, the server replies with the OK status code and starts accepting commands. Otherwise, an error is returned and the clients needs to try a new password.

Return Value
String reply

Syntax
Basic syntax of redis AUTH command is shown below:

redis 127.0.0.1:6379> AUTH PASSWORD 
Example
redis 127.0.0.1:6379> AUTH PASSWORD
(error) ERR Client sent AUTH, but no password is set
redis 127.0.0.1:6379> CONFIG SET requirepass "mypass"
OK
redis 127.0.0.1:6379> AUTH mypass
Ok

//echo

Redis ECHO command is used to print the given string.

Return Value
String reply

Syntax
Basic syntax of redis ECHO command is shown below:

redis 127.0.0.1:6379> ECHO SAMPLE_STRING 
Example
redis 127.0.0.1:6379> ECHO "Hello World"
"Hello World"

//ping

Redis PING command is used to check whether server is running or not.

Return Value
String reply

Syntax
Basic syntax of redis PING command is shown below:

redis 127.0.0.1:6379> PING 
Example
redis 127.0.0.1:6379> PING
PONG

//quit

Redis QUIT command ask the server to close the connection. The connection is closed as soon as all pending replies have been written to the client.

Return Value
String reply OK

Syntax
Basic syntax of redis QUIT command is shown below:

redis 127.0.0.1:6379> QUIT 
Example
redis 127.0.0.1:6379> QUIT
OK

//select

Redis SELECT command is used to select the DB with having the specified zero-based numeric index. New connections always use DB 0.

Return Value
String reply

Syntax
Basic syntax of redis SELECT command is shown below:

redis 127.0.0.1:6379> SELECT DB_INDEX
Example
redis 127.0.0.1:6379> SELECT 1
OK
redis 127.0.0.1:6379[1]>

========================================
Redis Server
========================================

Redis server commands are basically used to manage redis server.

Example
Following example explains how we can get all statistics and information about server.

redis 127.0.0.1:6379> INFO
.....1000s lines of information.....


//BGREWRITEAOF

Redis BGREWRITEAOF command instruct Redis to start an Append Only File rewrite process. The rewrite will create a small optimized version of the current Append Only File. If BGREWRITEAOF fails, no data gets lost as the old AOF will be untouched. The rewrite will be only triggered by Redis if there is not already a background process doing persistence.

Return Value
Simple string reply: always OK.

Syntax
Basic syntax of redis BGREWRITEAOF command is shown below:

redis 127.0.0.1:6379> BGREWRITEAOF 

//BGSAVE

Redis BGSAVE command save the DB in background. The OK code is immediately returned. Redis forks, the parent continues to serve the clients, the child saves the DB on disk then exits. A client my be able to check if the operation succeeded using the LASTSAVE command.

Return Value
Simple string reply.

Syntax
Basic syntax of redis BGSAVE command is shown below:

redis 127.0.0.1:6379> BGSAVE 

//client kill

Redis CLIENT KILL command command closes a given client connection.

Return Value
Simple string reply: OK if the connection exists and has been closed

Syntax
Basic syntax of redis CLIENT KILL command is shown below:

redis 127.0.0.1:6379> CLIENT KILL [ip:port] [ID client-id] [TYPE normal|slave|pubsub] [ADDR ip:port] [SKIPME yes/no] 
With Redis 2.8.12 or greater, the command can be run with multiple options as shown below:

CLIENT KILL ADDR ip:port. This is exactly the same as the old three-arguments behavior.

CLIENT KILL ID client-id. Allows to kill a client by its unique ID field, which was introduced in the CLIENT LIST command starting from Redis 2.8.12.

CLIENT KILL TYPE type, where type is one of normal, slave, pubsub. This closes the connections of all the clients in the specified class. Note that clients blocked into the MONITOR command are considered to belong to the normal class.

CLIENT KILL SKIPME yes/no. By default this option is set to yes, that is, the client calling the command will not get killed, however setting this option to no will have the effect of also killing the client calling the command.


//client list

Redis CLIENT LIST command returns information and statistics about the client connections server in a mostly human readable format.

Return Value
Bulk string reply, a unique string.

Syntax
Basic syntax of redis CLIENT LIST command is shown below:

redis 127.0.0.1:6379> CLIENT LIST 
Description of fields
id: an unique 64-bit client ID (introduced in Redis 2.8.12).

addr: address/port of the client

fd: file descriptor corresponding to the socket

age: total duration of the connection in seconds

idle: idle time of the connection in seconds

flags: client flags (see below)

db: current database ID

sub: number of channel subscriptions

psub: number of pattern matching subscriptions

multi: number of commands in a MULTI/EXEC context

qbuf: query buffer length (0 means no query pending)

qbuf-free: free space of the query buffer (0 means the buffer is full)

obl: output buffer length

oll: output list length (replies are queued in this list when the buffer is full)

omem: output buffer memory usage

events: file descriptor events (see below)

cmd: last command played

//getname

Redis CLIENT GETNAME command returns the name of the current connection as set by CLIENT SETNAME. Since every new connection starts without an associated name, if no name was assigned a null bulk reply is returned.

Return Value
Bulk string reply: The connection name, or a null bulk reply if no name is set.

Syntax
Basic syntax of redis CLIENT GETNAME command is shown below:

redis 127.0.0.1:6379> CLIENT GETNAME 



//pause

Redis CLIENT PAUSE command is a connections control command able to suspend all the Redis clients for the specified amount of time (in milliseconds). The command performs the following actions:

It stops processing all the pending commands from normal and pub/sub clients. However interactions with slaves will continue normally.

However it returns OK to the caller ASAP, so the CLIENT PAUSE command execution is not paused by itself.

When the specified amount of time has elapsed, all the clients are unblocked: this will trigger the processing of all the commands accumulated in the query buffer of every client during the pause.

Return Value
Simple string reply: The command returns OK or an error if the timeout is invalid.

Syntax
Basic syntax of redis CLIENT PAUSE command is shown below:

redis 127.0.0.1:6379> CLIENT PAUSE timeout 


//setname

Redis CLIENT SETNAME command assigns a name to the current connection. The assigned name is displayed in the output of CLIENT LIST so that it is possible to identify the client that performed a given connection.

Return Value
Simple string reply, OK if the connection name was successfully set.

Syntax
Basic syntax of redis CLIENT SETNAME command is shown below:

redis 127.0.0.1:6379> CLIENT SETNAME connection-name 
Example
redis 127.0.0.1:6379> CLIENT SETNAME "my connection" 
OK


//cluster slots

Redis CLUSTER SLOTS returns array reply of current cluster state.

Return Value
Array reply: nested list of slot ranges with IP/Port mappings.

Syntax
Basic syntax of redis CLUSTER SLOTS command is shown below:

redis 127.0.0.1:6379> CLUSTER SLOTS 
Sample reply
redis 127.0.0.1:6379> CLIENT SETNAME "my connection" 
1) 1) (integer) 0
   2) (integer) 4095
   3) 1) "127.0.0.1"
      2) (integer) 7000
   4) 1) "127.0.0.1"
      2) (integer) 7004
2) 1) (integer) 12288
   2) (integer) 16383
   3) 1) "127.0.0.1"
      2) (integer) 7003
   4) 1) "127.0.0.1"
      2) (integer) 7007
3) 1) (integer) 4096
   2) (integer) 8191
   3) 1) "127.0.0.1"
      2) (integer) 7001
   4) 1) "127.0.0.1"
      2) (integer) 7005
4) 1) (integer) 8192
   2) (integer) 12287
   3) 1) "127.0.0.1"
      2) (integer) 7002
   4) 1) "127.0.0.1"
      2) (integer) 7006



//command

Redis COMMAND array reply of details about all Redis commands.

Return Value
Array reply, nested list of command details. Commands are returned in random order.

Syntax
Basic syntax of redis COMMAND command is shown below:

redis 127.0.0.1:6379> COMMAND 
Example
redis 127.0.0.1:6379> COMMAND 
1) 1) "pfcount"
     2) (integer) -2
     3) 1) write
     4) (integer) 1
     5) (integer) 1
     6) (integer) 1
  2) 1) "command"
     2) (integer) 0
     3) 1) readonly
        2) loading
        3) stale
.....................
......................


//count

Redis COMMAND COUNT returns number of total commands in this Redis server.

Return Value
Integer reply, number of commands returned by COMMAND

Syntax
Basic syntax of redis COMMAND COUNT command is shown below:

redis 127.0.0.1:6379> COMMAND COUNT 
Example
redis 127.0.0.1:6379> COMMAND COUNT 
(integer) 163


//getkeys

Redis COMMAND GETKEYS is a helper command to let you find the keys from a full Redis command.

Return Value
Array reply, list of keys from your command.

Syntax
Basic syntax of redis COMMAND GETKEYS command is shown below:

redis 127.0.0.1:6379> COMMAND GETKEYS 
Example
redis 127.0.0.1:6379> COMMAND GETKEYS MSET a b c d e f 
1) "a"
2) "c"
3) "e"

//BGSave

Redis BGSAVE command save the DB in background. The OK code is immediately returned. Redis forks, the parent continues to serve the clients, the child saves the DB on disk then exits. A client my be able to check if the operation succeeded using the LASTSAVE command.

Return Value
Simple string reply.

Syntax
Basic syntax of redis BGSAVE command is shown below:

redis 127.0.0.1:6379> BGSAVE 

//command info 

Redis COMMAND INFO returns details about multiple redis commands.

Return Value
Array reply, nested list of command details.

Syntax
Basic syntax of redis COMMAND INFO command is shown below:

redis 127.0.0.1:6379> COMMAND INFO command-name [command-name ...] 
Example
redis 127.0.0.1:6379> COMMAND INFO get set eval 
1) 1) "get"
   2) (integer) 2
   3) 1) readonly
      2) fast
   4) (integer) 1
   5) (integer) 1
   6) (integer) 1
2) 1) "set"
   2) (integer) -3
   3) 1) write
      2) denyoom
   4) (integer) 1
   5) (integer) 1
   6) (integer) 1
3) 1) "eval"
   2) (integer) -3
   3) 1) noscript
      2) movablekeys
   4) (integer) 0
   5) (integer) 0
   6) (integer) 0



//config get

Redis CONFIG GET command is used to read the configuration parameters of a running Redis server. Not all the configuration parameters are supported in Redis 2.4, while Redis 2.6 can read the whole configuration of a server using this command.

Return Value
The return type of the command is a Bulk string reply.

Syntax
Basic syntax of redis CONFIG GET command is shown below:

redis 127.0.0.1:6379> CONFIG GET parameter 
Example
redis 127.0.0.1:6379> config get *max-*-entries* 
1) "hash-max-zipmap-entries"
2) "512"
3) "list-max-ziplist-entries"
4) "512"
5) "set-max-intset-entries"
6) "512"


//config rewrite

Redis CONFIG REWRITE command rewrites the redis.conf file the server was started with, applying the minimal changes needed to make it reflecting the configuration currently used by the server, that may be different compared to the original one because of the use of the CONFIG SET command.

Return Value
String reply, OK when the configuration was rewritten properly. Otherwise an error is returned.

Syntax
Basic syntax of redis CONFIG REWRITE command is shown below:

redis 127.0.0.1:6379> CONFIG REWRITE parameter 

//config set

Redis CONFIG Set command is used in order to reconfigure the server at run time without the need to restart Redis. You can change both trivial parameters or switch from one to another persistence option using this command.

Return Value
String reply: OK when the configuration was set properly. Otherwise an error is returned.

Syntax
Basic syntax of redis CONFIG Set command is shown below:

redis 127.0.0.1:6379> CONFIG Set parameter value 
Example
redis 127.0.0.1:6379> CONFIG Get "requirePass" 
""
redis 127.0.0.1:6379> CONFIG Set "requirePass" "pass1" 
OK


//config resetstat

Redis CONFIG RESETSTAT command resets the statistics reported by Redis using the INFO command. Following counters can be reset by using this command:

Keyspace hits

Keyspace misses

Number of commands processed

Number of connections received

Number of expired keys

Number of rejected connections

Latest fork(2) time

The aof_delayed_fsync counter

Return Value
String reply, always OK.

Syntax
Basic syntax of redis CONFIG RESETSTAT command is shown below:

redis 127.0.0.1:6379> CONFIG RESETSTAT 



//dbsize

Redis DBSIZE command used to get number of keys in selected database.

Return Value
Integer reply.

Syntax
Basic syntax of redis DBSIZE command is shown below:

redis 127.0.0.1:6379> DBSIZE 
Example
redis 127.0.0.1:6379> DBSIZE 
(integer) 147


//debug object

Redis DEBUG OBJECT is a debugging command that should not be used by clients. Check the OBJECT command instead.

Return Value
String reply.

Syntax
Basic syntax of redis DEBUG OBJECT command is shown below:

redis 127.0.0.1:6379> DEBUG OBJECT key 
Example
redis 127.0.0.1:6379> SET a a 
OK
redis 127.0.0.1:6379> DEBUG OBJECT a 
Value at:0x7f68f7886df0 refcount:1 encoding:raw serializedlength:2 lru:1566733 lru_seconds_idle:1


//segfault

Redis DEBUG SEGFAULT performs an invalid memory access that crashes Redis. It is used to simulate bugs during the development.

Return Value
String reply.

Syntax
Basic syntax of redis DEBUG SEGFAULT command is shown below:

redis 127.0.0.1:6379> DEBUG SEGFAULT 
Example
redis 127.0.0.1:6379> DEBUG SEGFAULT 
Could not connect to Redis at 127.0.0.1:6379: Connection refused
not connected>


//flushall

Redis FLUSHALL delete all the keys of all the existing databases, not just the currently selected one. This command never fails.

Return Value
String reply.

Syntax
Basic syntax of redis FLUSHALL command is shown below:

redis 127.0.0.1:6379> FLUSHALL 
Example
redis 127.0.0.1:6379> FLUSHALL 
OK

//flushdb

Redis FLUSHDB delete all the keys of the currently selected DB. This command never fails.

Return Value
String reply.

Syntax
Basic syntax of redis FLUSHDB command is shown below:

redis 127.0.0.1:6379> FLUSHDB 
Example
redis 127.0.0.1:6379> FLUSHDB 
OK


//last save

Redis LASTSAVE command returns the UNIX TIME of the last DB save executed with success. A client may check if a BGSAVE command succeeded reading the LASTSAVE value, then issuing a BGSAVE command and checking at regular intervals every N seconds if LASTSAVE changed.

Return Value
Integer reply, an UNIX time stamp.

Syntax
Basic syntax of redis LASTSAVE command is shown below:

redis 127.0.0.1:6379> LASTSAVE 
Example
redis 127.0.0.1:6379> LASTSAVE 
(integer) 1410853592


//monitor

Redis MONITOR is a debugging command that streams back every command processed by the Redis server. It can help in understanding what is happening to the database. This command can both be used via redis-cli and via telnet. The ability to see all the requests processed by the server is useful in order to spot bugs in an application both when using Redis as a database and as a distributed caching system.

Syntax
Basic syntax of redis MONITOR command is shown below:

redis 127.0.0.1:6379> MONITOR 
Example
redis 127.0.0.1:6379> MONITOR 
OK
1410855382.370791 [0 127.0.0.1:60581] "info"
1410855404.062722 [0 127.0.0.1:60581] "get" "a"


//server role

Redis ROLE is a debugging command that streams back every command processed by the Redis server. It can help in understanding what is happening to the database. This command can both be used via redis-cli and via telnet. The ability to see all the requests processed by the server is useful in order to spot bugs in an application both when using Redis as a database and as a distributed caching system.

Syntax
Basic syntax of redis ROLE command is shown below:

redis 127.0.0.1:6379> ROLE 
Return Value
The command returns an array of elements. The first element is the role of the instance, as one of the following three strings:

master

slave

sentinel

Example
redis 127.0.0.1:6379> ROLE 
1) "master"
2) (integer) 3129659
3) 1) 1) "127.0.0.1"
      2) "9001"
      3) "3129242"
   2) 1) "127.0.0.1"
      2) "9002"
      3) "3129543"

//save

Redis SAVE command performs a synchronous save of the dataset producing a point in time snapshot of all the data inside the Redis instance, in the form of an RDB file.

Return Value
String reply, The commands returns OK on success.

Syntax
Basic syntax of redis SAVE command is shown below:

redis 127.0.0.1:6379> SAVE 
Example
redis 127.0.0.1:6379> SAVE 
OK


//shutdown

Redis SHUTDOWN command stops all clients, perform a save, flush all append only files (if AOF is enabled) and quit the server.

Return Value
Simple string reply on error. On success nothing is returned since the server quits and the connection is closed.

Syntax
Basic syntax of redis SHUTDOWN command is shown below:

redis 127.0.0.1:6379> SHUTDOWN [NOSAVE] [SAVE] 
Example
redis 127.0.0.1:6379> SHUTDOWN 


//slaveof

Redis SLAVEOF command can change the replication settings of a slave on the fly. If a Redis server is already acting as slave, the command SLAVEOF NO ONE will turn off the replication, turning the Redis server into a MASTER. In the proper form SLAVEOF hostname port will make the server a slave of another server listening at the specified hostname and port. If a server is already a slave of some master, SLAVEOF hostname port will stop the replication against the old server and start the synchronization against the new one, discarding the old dataset.

Return Value
Simple string reply

Syntax
Basic syntax of redis SLAVEOF command is shown below:

redis 127.0.0.1:6379> SLAVEOF host port  



//show log

The Redis Slow Log is a system to log queries that exceeded a specified execution time. The execution time does not include I/O operations like talking with the client, 
sending the reply and so forth, but just the time needed to actually execute the command (this is the only stage of command execution where the thread is blocked and 
can not serve other requests in the meantime). You can configure the slow log with two parameters: slowlog-log-slower-than tells Redis what is the execution time,
 in microseconds, to exceed in order for the command to get logged. Note that a negative number disables the slow log, while a value of zero forces the logging of 
every command. slowlog-max-len is the length of the slow log. The minimum value is zero. When a new command is logged and the slow log is already at its maximum length,
 the oldest one is removed from the queue of logged commands in order to make space. The configuration can be done by editing redis.conf or while the server is running using
 the CONFIG GET and CONFIG SET commands.

Return Value
Simple string reply

Syntax
Basic syntax of redis SLOWLOG command is shown below:

redis 127.0.0.1:6379> SLOWLOG subcommand [argument]  
Sample output
redis 127.0.0.1:6379> slowlog get 2
1) 1) (integer) 14
   2) (integer) 1309448221
   3) (integer) 15
   4) 1) "ping"
2) 1) (integer) 13
   2) (integer) 1309448128
   3) (integer) 30
   4) 1) "slowlog"
      2) "get"
      3) "100"  


//sync

Redis SYNC command used to sync slave to master.

Return Value
Simple string reply.

Syntax
Basic syntax of redis SYNC command is shown below:

redis 127.0.0.1:6379> SYNC 
Example
redis 127.0.0.1:6379> SYNC 
Entering slave output mode...  (press Ctrl-C to quit)
SYNC with master, discarding 18 bytes of bulk transfer...
SYNC done. Logging commands from master.
"PING"
"PING"
"PING"
"PING"


//time

Redis TIME command returns the current server time as a two items lists: a Unix timestamp and the amount of microseconds already elapsed in the current second. Basically the interface is very similar to the one of the gettimeofday system call.

Return Value
A multi bulk reply containing two elements:

unix time in seconds.

microseconds.

Syntax
Basic syntax of redis TIME command is shown below:

redis 127.0.0.1:6379> TIME 
Example
redis 127.0.0.1:6379> TIME 
1) "1410856598"
2) "928370"


=====================================
BackUp
=====================================

Redis SAVE command is used to create back up of current redis database.

SYNTAX
Basic syntax of redis SAVE command is shown below:

127.0.0.1:6379> SAVE
EXAMPLE
Below given example create the back up of current database.

127.0.0.1:6379> SAVE

OK

This command will create dump.rdb file in your redis directory.

Restore Redis Data
To restore redis data just move redis backup file (dump.rdb) into your redis directory and start the server. To get your redis directory use CONFIG command of redis as shown below:

127.0.0.1:6379> CONFIG get dir

1) "dir"
2) "/user/tutorialspoint/redis-2.8.13/src"

In the output of above command /user/tutorialspoint/redis-2.8.13/src is the directory, where redis server is installed.

Bgsave
To create redis backup alternate command BGSAVE is also available. This command will start the backup process and run this in background

EXAMPLE
127.0.0.1:6379> BGSAVE

Background saving started



===================================
Security
===================================

Redis database can be make secured , so any client making connection needs to authenticate before executing command. To secure redis you need to set the password in config file.

Example
Below given example shows the steps to secure your redis instance.

127.0.0.1:6379> CONFIG get requirepass
1) "requirepass"
2) ""
By default this property is blank, means no password is set for this instance. You can change this property by executing the following command

127.0.0.1:6379> CONFIG set requirepass "tutorialspoint"
OK
127.0.0.1:6379> CONFIG get requirepass
1) "requirepass"
2) "tutorialspoint"
After setting the password if any client runs command without authentication, then (error) NOAUTH Authentication required. error will return to that. So client needs to use AUTH command to authenticate himself.

Syntax
Basic syntax of AUTH command is shown below:

127.0.0.1:6379> AUTH password
Example
127.0.0.1:6379> AUTH "tutorialspoint"
OK
127.0.0.1:6379> SET mykey "Test value"
OK
127.0.0.1:6379> GET mykey
"Test value"


============================================
Benchmark
============================================

Redis benchmark is the utility to check the performance of redis by running n commands simultaneously.

SYNTAX
Basic syntax of redis benchmark is shown below:

redis-benchmark [option] [option value]
EXAMPLE
Below given example check the redis by calling 100000 commands.

redis-benchmark -n 100000

PING_INLINE: 141043.72 requests per second
PING_BULK: 142857.14 requests per second
SET: 141442.72 requests per second
GET: 145348.83 requests per second
INCR: 137362.64 requests per second
LPUSH: 145348.83 requests per second
LPOP: 146198.83 requests per second
SADD: 146198.83 requests per second
SPOP: 149253.73 requests per second
LPUSH (needed to benchmark LRANGE): 148588.42 requests per second
LRANGE_100 (first 100 elements): 58411.21 requests per second
LRANGE_300 (first 300 elements): 21195.42 requests per second
LRANGE_500 (first 450 elements): 14539.11 requests per second
LRANGE_600 (first 600 elements): 10504.20 requests per second
MSET (10 keys): 93283.58 requests per second

In redis benchmark there are many options available, which are listed below:

S.N.	Option	Description	Default Value
1	-h	Specifies server host name	127.0.0.1
2	-p	Specifies server port	6379
3	-s	Specifies server socket	
4	-c	Specifies number of parallel connections	50
5	-n	Specifies total number of requests	10000
6	-d	Specifies data size of SET/GET value in bytes	2
7	-k	1=keep alive 0=reconnect	1
8	-r	Use random keys for SET/GET/INCR, random values for SADD	
9	-p	Pipeline <numreq> requests	1
1	-h	Specifies server host name	
10	-q	Forces Quiet to redis. Just show query/sec values	
11	--csv	Output in CSV format	
12	-l	Generates loop, Run the tests forever	
13	-t	Only run the comma-separated list of tests.	
14	-I	Idle mode. Just open N idle connections and wait.	
Example
Below given example shows the multiple usage of options in redis benchmark utility.

redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 100000 -q

SET: 146198.83 requests per second
LPUSH: 145560.41 requests per second


================================
CLIENT COMMANDS
================================

Redis accepts clients connections on the configured listening TCP port and on the Unix socket if enabled. When a new client connection is accepted the following operations are performed:

The client socket is put in non-blocking state since Redis uses multiplexing and non-blocking I/O.

The TCP_NODELAY option is set in order to ensure that we don't have delays in our connection.

A readable file event is created so that Redis is able to collect the client queries as soon as new data is available to be read on the socket.

Maximum number of clients
In Redis config (redis.conf) there is property called maxclients, which describes maximum number of clients that can connect to redis. Basic syntax of command is:

config get maxclients

1) "maxclients"
2) "10000"

By default this property is set to 10000 (depending upon maximum number of file descriptors limit of OS), although you can change this property.

EXAMPLE
In below given example we have set maximum number of clients to 100000, while starting the server

redis-server --maxclients 100000
Client Commands
S.N.	Command	Description
1	CLIENT LIST	Returns the list of clients connected to redis server
2	CLIENT SETNAME	Assigns a name to the current connection
3	CLIENT GETNAME	Returns the name of the current connection as set by CLIENT SETNAME.
4	CLIENT PAUSE	This is a connections control command able to suspend all the Redis clients for the specified amount of time (in milliseconds).
5	CLIENT KILL	This command closes a given client connection.


====================
PIPELINING
====================

edis is a TCP server and supports Request/Response protocol. In redis a request is accomplished with the following steps:

The client sends a query to the server, and reads from the socket, usually in a blocking way, for the server response.

The server processes the command and sends the response back to the client.

Meaning of Pipelining
Basic meaning of pipelining is, client can send multiple requests to server without waiting for the replies at all, and finally read the replies in a single step.

Example
To check the redis pipelining, just start the redis instance and type following command in terminal.

$(echo -en "PING\r\n SET tutorial redis\r\nGET tutorial\r\nINCR visitor\r\nINCR visitor\r\nINCR visitor\r\n"; sleep 10) | nc localhost 6379

+PONG
+OK
redis
:1
:2
:3

In the above shown example we have check redis connection by using PING command, after that we have set a string named tutorial with value redis, after that get that keys value and increment visitor number three times. In the result we can check that all commands are submitted to redis once and redis is giving output of all commands in single step.

=========================================================================================================================
Redis and Java
=========================================================================================================================

Connect to redis server

import redis.clients.jedis.Jedis;
public class RedisJava {
   public static void main(String[] args) {
      //Connecting to Redis server on localhost
      Jedis jedis = new Jedis("localhost");
      System.out.println("Connection to server sucessfully");
      //check whether server is running or not
      System.out.println("Server is running: "+jedis.ping());
 }
}

Now, let's compile and run above program to test the connection to redis server. You can change your path as per your requirement. We are assuming current version of jedis.jar is available in the current path

$javac RedisJava.java
$java RedisJava
Connection to server sucessfully
Server is running: PONG

Redis Java String Example

import redis.clients.jedis.Jedis;
public class RedisStringJava {
   public static void main(String[] args) {
      //Connecting to Redis server on localhost
      Jedis jedis = new Jedis("localhost");
      System.out.println("Connection to server sucessfully");
      //set the data in redis string
      jedis.set("tutorial-name", "Redis tutorial");
     // Get the stored data and print it
     System.out.println("Stored string in redis:: "+ jedis.get("tutorial-name"));
 }
}

Now, let's compile and run above program.

$javac RedisStringJava.java
$java RedisStringJava
Connection to server sucessfully
Stored string in redis:: Redis tutorial

Redis Java List Example

import redis.clients.jedis.Jedis;
public class RedisListJava {
   public static void main(String[] args) {
      //Connecting to Redis server on localhost
      Jedis jedis = new Jedis("localhost");
      System.out.println("Connection to server sucessfully");
      //store data in redis list
      jedis.lpush("tutorial-list", "Redis");
      jedis.lpush("tutorial-list", "Mongodb");
      jedis.lpush("tutorial-list", "Mysql");
     // Get the stored data and print it
     List<String> list = jedis.lrange("tutorial-list", 0 ,5);
     for(int i=0; i<list.size(); i++) {
       System.out.println("Stored string in redis:: "+list.get(i));
     }
 }
}

Now, let's compile and run above program.

$javac RedisListJava.java
$java RedisListJava
Connection to server sucessfully
Stored string in redis:: Redis
Stored string in redis:: Mongodb
Stored string in redis:: Mysql

Redis Java Keys Example

import redis.clients.jedis.Jedis;
public class RedisKeyJava {
   public static void main(String[] args) {
      //Connecting to Redis server on localhost
      Jedis jedis = new Jedis("localhost");
      System.out.println("Connection to server sucessfully");
      //store data in redis list
     // Get the stored data and print it
     List<String> list = jedis.keys("*");
     for(int i=0; i<list.size(); i++) {
       System.out.println("List of stored keys:: "+list.get(i));
     }
   }
}

Now, let's compile and run above program.

$javac RedisKeyJava.java
$java RedisKeyJava
Connection to server sucessfully
List of stored keys:: tutorial-name
List of stored keys:: tutorial-list



=========================================================================================================================
Redis and PHP
=========================================================================================================================


Connect to redis server

<?php
   //Connecting to Redis server on localhost
   $redis = new Redis();
   $redis->connect('127.0.0.1', 6379);
   echo "Connection to server sucessfully";
   //check whether server is running or not
   echo "Server is running: "+ $redis->ping();
?>

When program is executed, it will produce the following result:


Connection to server sucessfully
Server is running: PONG

Redis php String Example

<?php
   //Connecting to Redis server on localhost
   $redis = new Redis();
   $redis->connect('127.0.0.1', 6379);
   echo "Connection to server sucessfully";
   //set the data in redis string
   $redis->set("tutorial-name", "Redis tutorial");
   // Get the stored data and print it
   echo "Stored string in redis:: " + jedis.get("tutorial-name");
?>

When program is executed, it will produce the following result:


Connection to server sucessfully
Stored string in redis:: Redis tutorial

Redis php List Example

<?php
   //Connecting to Redis server on localhost
   $redis = new Redis();
   $redis->connect('127.0.0.1', 6379);
   echo "Connection to server sucessfully";
   //store data in redis list
   $redis->lpush("tutorial-list", "Redis");
   $redis->lpush("tutorial-list", "Mongodb");
   $redis->lpush("tutorial-list", "Mysql");
   // Get the stored data and print it
   $arList = $redis->lrange("tutorial-list", 0 ,5);
   echo "Stored string in redis:: "
   print_r($arList);
?>

When program is executed, it will produce the following result:


Connection to server sucessfully
Stored string in redis::
Redis
Mongodb
Mysql

Redis Php Keys Example

<?php
   //Connecting to Redis server on localhost
   $redis = new Redis();
   $redis->connect('127.0.0.1', 6379);
   echo "Connection to server sucessfully";
   // Get the stored keys and print it
   $arList = $redis->keys("*");
   echo "Stored keys in redis:: "
   print_r($arList);
?>

When program is executed, it will produce the following result:


Connection to server sucessfully
Stored string in redis::
tutorial-name
tutorial-list






















